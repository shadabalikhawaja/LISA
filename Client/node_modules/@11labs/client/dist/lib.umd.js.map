{"version":3,"file":"lib.umd.js","sources":["../src/utils/audio.ts","../src/utils/rawAudioProcessor.ts","../src/utils/compatibility.ts","../src/utils/input.ts","../src/utils/audioConcatProcessor.ts","../src/utils/output.ts","../src/utils/events.ts","../src/utils/connection.ts","../src/index.ts"],"sourcesContent":["export function arrayBufferToBase64(b: ArrayBufferLike) {\n  const buffer = new Uint8Array(b);\n  // @ts-ignore\n  const base64Data = window.btoa(String.fromCharCode(...buffer));\n  return base64Data;\n}\n\nexport function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binaryString = window.atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n","/*\n * ulaw encoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nconst blob = new Blob(\n  [\n    // language=JavaScript\n    `\n      const BIAS = 0x84;\n      const CLIP = 32635;\n      const encodeTable = [\n        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\n        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\n      ];\n      \n      function encodeSample(sample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let muLawSample;\n        sign = (sample >> 8) & 0x80;\n        if (sign !== 0) sample = -sample;\n        sample = sample + BIAS;\n        if (sample > CLIP) sample = CLIP;\n        exponent = encodeTable[(sample>>7) & 0xFF];\n        mantissa = (sample >> (exponent+3)) & 0x0F;\n        muLawSample = ~(sign | (exponent << 4) | mantissa);\n        \n        return muLawSample;\n      }\n    \n      class RawAudioProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n                    \n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case \"setFormat\":\n                this.isMuted = false;\n                this.buffer = []; // Initialize an empty buffer\n                this.bufferSize = data.sampleRate / 4;\n                this.format = data.format;\n\n                if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\n                  globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\n                    this.resampler = resampler;\n                  });\n                }\n                break;\n              case \"setMuted\":\n                this.isMuted = data.isMuted;\n                break;\n            }\n          };\n        }\n        process(inputs) {\n          if (!this.buffer) {\n            return true;\n          }\n          \n          const input = inputs[0]; // Get the first input node\n          if (input.length > 0) {\n            let channelData = input[0]; // Get the first channel's data\n\n            // Resample the audio if necessary\n            if (this.resampler) {\n              channelData = this.resampler.full(channelData);\n            }\n\n            // Add channel data to the buffer\n            this.buffer.push(...channelData);\n            // Get max volume \n            let sum = 0.0;\n            for (let i = 0; i < channelData.length; i++) {\n              sum += channelData[i] * channelData[i];\n            }\n            const maxVolume = Math.sqrt(sum / channelData.length);\n            // Check if buffer size has reached or exceeded the threshold\n            if (this.buffer.length >= this.bufferSize) {\n              const float32Array = this.isMuted \n                ? new Float32Array(this.buffer.length)\n                : new Float32Array(this.buffer);\n\n              let encodedArray = this.format === \"ulaw\"\n                ? new Uint8Array(float32Array.length)\n                : new Int16Array(float32Array.length);\n\n              // Iterate through the Float32Array and convert each sample to PCM16\n              for (let i = 0; i < float32Array.length; i++) {\n                // Clamp the value to the range [-1, 1]\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\n\n                // Scale the sample to the range [-32768, 32767]\n                let value = sample < 0 ? sample * 32768 : sample * 32767;\n                if (this.format === \"ulaw\") {\n                  value = encodeSample(Math.round(value));\n                }\n\n                encodedArray[i] = value;\n              }\n\n              // Send the buffered data to the main script\n              this.port.postMessage([encodedArray, maxVolume]);\n\n              // Clear the buffer after sending\n              this.buffer = [];\n            }\n          }\n          return true; // Continue processing\n        }\n      }\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\n  `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const rawAudioProcessor = URL.createObjectURL(blob);\n","export function isIosDevice() {\n  return (\n    [\n      \"iPad Simulator\",\n      \"iPhone Simulator\",\n      \"iPod Simulator\",\n      \"iPad\",\n      \"iPhone\",\n      \"iPod\",\n    ].includes(navigator.platform) ||\n    // iPad on iOS 13 detection\n    (navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document)\n  );\n}\n\nexport function isAndroidDevice() {\n  return /android/i.test(navigator.userAgent);\n}\n","import { rawAudioProcessor } from \"./rawAudioProcessor\";\nimport { FormatConfig } from \"./connection\";\nimport { isIosDevice } from \"./compatibility\";\n\nexport type InputConfig = {\n  preferHeadphonesForIosDevices?: boolean;\n};\n\nconst LIBSAMPLERATE_JS =\n  \"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\";\n\nexport class Input {\n  public static async create({\n    sampleRate,\n    format,\n    preferHeadphonesForIosDevices,\n  }: FormatConfig & InputConfig): Promise<Input> {\n    let context: AudioContext | null = null;\n    let inputStream: MediaStream | null = null;\n\n    try {\n      const options: MediaTrackConstraints = {\n        sampleRate: { ideal: sampleRate },\n        echoCancellation: { ideal: true },\n        noiseSuppression: { ideal: true },\n      };\n\n      if (isIosDevice() && preferHeadphonesForIosDevices) {\n        const availableDevices =\n          await window.navigator.mediaDevices.enumerateDevices();\n        const idealDevice = availableDevices.find(\n          d =>\n            // cautious to include \"bluetooth\" in the search\n            // as might trigger bluetooth speakers\n            d.kind === \"audioinput\" &&\n            [\"airpod\", \"headphone\", \"earphone\"].find(keyword =>\n              d.label.toLowerCase().includes(keyword)\n            )\n        );\n        if (idealDevice) {\n          options.deviceId = { ideal: idealDevice.deviceId };\n        }\n      }\n\n      const supportsSampleRateConstraint =\n        navigator.mediaDevices.getSupportedConstraints().sampleRate;\n\n      context = new window.AudioContext(\n        supportsSampleRateConstraint ? { sampleRate } : {}\n      );\n      const analyser = context.createAnalyser();\n      if (!supportsSampleRateConstraint) {\n        await context.audioWorklet.addModule(LIBSAMPLERATE_JS);\n      }\n      await context.audioWorklet.addModule(rawAudioProcessor);\n\n      inputStream = await navigator.mediaDevices.getUserMedia({\n        audio: options,\n      });\n\n      const source = context.createMediaStreamSource(inputStream);\n      const worklet = new AudioWorkletNode(context, \"raw-audio-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format, sampleRate });\n\n      source.connect(analyser);\n      analyser.connect(worklet);\n\n      await context.resume();\n\n      return new Input(context, analyser, worklet, inputStream);\n    } catch (error) {\n      inputStream?.getTracks().forEach(track => track.stop());\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly worklet: AudioWorkletNode,\n    public readonly inputStream: MediaStream\n  ) {}\n\n  public async close() {\n    this.inputStream.getTracks().forEach(track => track.stop());\n    await this.context.close();\n  }\n\n  public setMuted(isMuted: boolean) {\n    this.worklet.port.postMessage({ type: \"setMuted\", isMuted });\n  }\n}\n","/*\n * ulaw decoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nconst blob = new Blob(\n  [\n    // language=JavaScript\n    `\n      const decodeTable = [0,132,396,924,1980,4092,8316,16764];\n      \n      export function decodeSample(muLawSample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let sample;\n        muLawSample = ~muLawSample;\n        sign = (muLawSample & 0x80);\n        exponent = (muLawSample >> 4) & 0x07;\n        mantissa = muLawSample & 0x0F;\n        sample = decodeTable[exponent] + (mantissa << (exponent+3));\n        if (sign !== 0) sample = -sample;\n\n        return sample;\n      }\n      \n      class AudioConcatProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffers = []; // Initialize an empty buffer\n          this.cursor = 0;\n          this.currentBuffer = null;\n          this.wasInterrupted = false;\n          this.finished = false;\n          \n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case \"setFormat\":\n                this.format = data.format;\n                break;\n              case \"buffer\":\n                this.wasInterrupted = false;\n                this.buffers.push(\n                  this.format === \"ulaw\"\n                    ? new Uint8Array(data.buffer)\n                    : new Int16Array(data.buffer)\n                );\n                break;\n              case \"interrupt\":\n                this.wasInterrupted = true;\n                break;\n              case \"clearInterrupted\":\n                if (this.wasInterrupted) {\n                  this.wasInterrupted = false;\n                  this.buffers = [];\n                  this.currentBuffer = null;\n                }\n            }\n          };\n        }\n        process(_, outputs) {\n          let finished = false;\n          const output = outputs[0][0];\n          for (let i = 0; i < output.length; i++) {\n            if (!this.currentBuffer) {\n              if (this.buffers.length === 0) {\n                finished = true;\n                break;\n              }\n              this.currentBuffer = this.buffers.shift();\n              this.cursor = 0;\n            }\n\n            let value = this.currentBuffer[this.cursor];\n            if (this.format === \"ulaw\") {\n              value = decodeSample(value);\n            }\n            output[i] = value / 32768;\n            this.cursor++;\n\n            if (this.cursor >= this.currentBuffer.length) {\n              this.currentBuffer = null;\n            }\n          }\n\n          if (this.finished !== finished) {\n            this.finished = finished;\n            this.port.postMessage({ type: \"process\", finished });\n          }\n\n          return true; // Continue processing\n        }\n      }\n\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\n    `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const audioConcatProcessor = URL.createObjectURL(blob);\n","import { audioConcatProcessor } from \"./audioConcatProcessor\";\nimport { FormatConfig } from \"./connection\";\n\nexport class Output {\n  public static async create({\n    sampleRate,\n    format,\n  }: FormatConfig): Promise<Output> {\n    let context: AudioContext | null = null;\n    try {\n      context = new AudioContext({ sampleRate });\n      const analyser = context.createAnalyser();\n      const gain = context.createGain();\n      gain.connect(analyser);\n      analyser.connect(context.destination);\n      await context.audioWorklet.addModule(audioConcatProcessor);\n      const worklet = new AudioWorkletNode(context, \"audio-concat-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format });\n      worklet.connect(gain);\n\n      await context.resume();\n\n      return new Output(context, analyser, gain, worklet);\n    } catch (error) {\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly gain: GainNode,\n    public readonly worklet: AudioWorkletNode\n  ) {}\n\n  public async close() {\n    await this.context.close();\n  }\n}\n","import { Language } from \"./connection\";\n\nexport type UserTranscriptionEvent = {\n  type: \"user_transcript\";\n  user_transcription_event: { user_transcript: string };\n};\nexport type AgentResponseEvent = {\n  type: \"agent_response\";\n  agent_response_event: { agent_response: string };\n};\nexport type AgentAudioEvent = {\n  type: \"audio\";\n  audio_event: {\n    audio_base_64: string;\n    event_id: number;\n  };\n};\nexport type InterruptionEvent = {\n  type: \"interruption\";\n  interruption_event: {\n    event_id: number;\n  };\n};\nexport type InternalTentativeAgentResponseEvent = {\n  type: \"internal_tentative_agent_response\";\n  tentative_agent_response_internal_event: {\n    tentative_agent_response: string;\n  };\n};\nexport type ConfigEvent = {\n  type: \"conversation_initiation_metadata\";\n  conversation_initiation_metadata_event: {\n    conversation_id: string;\n    agent_output_audio_format: string;\n    user_input_audio_format?: string;\n  };\n};\nexport type PingEvent = {\n  type: \"ping\";\n  ping_event: {\n    event_id: number;\n    ping_ms?: number;\n  };\n};\nexport type ClientToolCallEvent = {\n  type: \"client_tool_call\";\n  client_tool_call: {\n    tool_name: string;\n    tool_call_id: string;\n    parameters: any;\n    expects_response: boolean;\n  };\n};\n\n// TODO correction missing\nexport type IncomingSocketEvent =\n  | UserTranscriptionEvent\n  | AgentResponseEvent\n  | AgentAudioEvent\n  | InterruptionEvent\n  | InternalTentativeAgentResponseEvent\n  | ConfigEvent\n  | PingEvent\n  | ClientToolCallEvent;\n\nexport type PongEvent = {\n  type: \"pong\";\n  event_id: number;\n};\nexport type UserAudioEvent = {\n  user_audio_chunk: string;\n};\nexport type UserFeedbackEvent = {\n  type: \"feedback\";\n  score: \"like\" | \"dislike\";\n  event_id: number;\n};\nexport type ClientToolResultEvent = {\n  type: \"client_tool_result\";\n  tool_call_id: string;\n  result: any;\n  is_error: boolean;\n};\nexport type InitiationClientDataEvent = {\n  type: \"conversation_initiation_client_data\";\n  conversation_config_override?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      first_message?: string;\n      language?: Language;\n    };\n    tts?: {\n      voice_id?: string;\n    };\n  };\n  custom_llm_extra_body?: any;\n  dynamic_variables?: Record<string, string | number | boolean>;\n};\nexport type OutgoingSocketEvent =\n  | PongEvent\n  | UserAudioEvent\n  | InitiationClientDataEvent\n  | UserFeedbackEvent\n  | ClientToolResultEvent;\n\nexport function isValidSocketEvent(event: any): event is IncomingSocketEvent {\n  return !!event.type;\n}\n","import {\n  InitiationClientDataEvent,\n  ConfigEvent,\n  isValidSocketEvent,\n  OutgoingSocketEvent,\n  IncomingSocketEvent,\n} from \"./events\";\n\nconst MAIN_PROTOCOL = \"convai\";\n\nexport type Language =\n  | \"en\"\n  | \"ja\"\n  | \"zh\"\n  | \"de\"\n  | \"hi\"\n  | \"fr\"\n  | \"ko\"\n  | \"pt\"\n  | \"it\"\n  | \"es\"\n  | \"id\"\n  | \"nl\"\n  | \"tr\"\n  | \"pl\"\n  | \"sv\"\n  | \"bg\"\n  | \"ro\"\n  | \"ar\"\n  | \"cs\"\n  | \"el\"\n  | \"fi\"\n  | \"ms\"\n  | \"da\"\n  | \"ta\"\n  | \"uk\"\n  | \"ru\"\n  | \"hu\"\n  | \"no\"\n  | \"vi\";\nexport type SessionConfig = {\n  origin?: string;\n  authorization?: string;\n  overrides?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      firstMessage?: string;\n      language?: Language;\n    };\n    tts?: {\n      voiceId?: string;\n    };\n  };\n  customLlmExtraBody?: any;\n  dynamicVariables?: Record<string, string | number | boolean>;\n  connectionDelay?: {\n    default: number;\n    android?: number;\n    ios?: number;\n  };\n} & (\n  | { signedUrl: string; agentId?: undefined }\n  | { agentId: string; signedUrl?: undefined }\n);\nexport type FormatConfig = {\n  format: \"pcm\" | \"ulaw\";\n  sampleRate: number;\n};\nexport type DisconnectionDetails =\n  | {\n      reason: \"error\";\n      message: string;\n      context: Event;\n    }\n  | {\n      reason: \"agent\";\n      context: CloseEvent;\n    }\n  | {\n      reason: \"user\";\n    };\nexport type OnDisconnectCallback = (details: DisconnectionDetails) => void;\nexport type OnMessageCallback = (event: IncomingSocketEvent) => void;\n\nconst WSS_API_ORIGIN = \"wss://api.elevenlabs.io\";\nconst WSS_API_PATHNAME = \"/v1/convai/conversation?agent_id=\";\n\nexport class Connection {\n  public static async create(config: SessionConfig): Promise<Connection> {\n    let socket: WebSocket | null = null;\n\n    try {\n      const origin = config.origin ?? WSS_API_ORIGIN;\n      const url = config.signedUrl\n        ? config.signedUrl\n        : origin + WSS_API_PATHNAME + config.agentId;\n\n      const protocols = [MAIN_PROTOCOL];\n      if (config.authorization) {\n        protocols.push(`bearer.${config.authorization}`);\n      }\n      socket = new WebSocket(url, protocols);\n      const conversationConfig = await new Promise<\n        ConfigEvent[\"conversation_initiation_metadata_event\"]\n      >((resolve, reject) => {\n        socket!.addEventListener(\n          \"open\",\n          () => {\n            const overridesEvent: InitiationClientDataEvent = {\n              type: \"conversation_initiation_client_data\",\n            };\n\n            if (config.overrides) {\n              overridesEvent.conversation_config_override = {\n                agent: {\n                  prompt: config.overrides.agent?.prompt,\n                  first_message: config.overrides.agent?.firstMessage,\n                  language: config.overrides.agent?.language,\n                },\n                tts: {\n                  voice_id: config.overrides.tts?.voiceId,\n                },\n              };\n            }\n\n            if (config.customLlmExtraBody) {\n              overridesEvent.custom_llm_extra_body = config.customLlmExtraBody;\n            }\n\n            if (config.dynamicVariables) {\n              overridesEvent.dynamic_variables = config.dynamicVariables;\n            }\n\n            socket?.send(JSON.stringify(overridesEvent));\n          },\n          { once: true }\n        );\n        socket!.addEventListener(\"error\", event => {\n          // In case the error event is followed by a close event, we want the\n          // latter to be the one that rejects the promise as it contains more\n          // useful information.\n          setTimeout(() => reject(event), 0);\n        });\n        socket!.addEventListener(\"close\", reject);\n        socket!.addEventListener(\n          \"message\",\n          (event: MessageEvent) => {\n            const message = JSON.parse(event.data);\n\n            if (!isValidSocketEvent(message)) {\n              return;\n            }\n\n            if (message.type === \"conversation_initiation_metadata\") {\n              resolve(message.conversation_initiation_metadata_event);\n            } else {\n              console.warn(\n                \"First received message is not conversation metadata.\"\n              );\n            }\n          },\n          { once: true }\n        );\n      });\n\n      const {\n        conversation_id,\n        agent_output_audio_format,\n        user_input_audio_format,\n      } = conversationConfig;\n\n      const inputFormat = parseFormat(user_input_audio_format ?? \"pcm_16000\");\n      const outputFormat = parseFormat(agent_output_audio_format);\n\n      return new Connection(socket, conversation_id, inputFormat, outputFormat);\n    } catch (error) {\n      socket?.close();\n      throw error;\n    }\n  }\n\n  private queue: IncomingSocketEvent[] = [];\n  private disconnectionDetails: DisconnectionDetails | null = null;\n  private onDisconnectCallback: OnDisconnectCallback | null = null;\n  private onMessageCallback: OnMessageCallback | null = null;\n\n  private constructor(\n    public readonly socket: WebSocket,\n    public readonly conversationId: string,\n    public readonly inputFormat: FormatConfig,\n    public readonly outputFormat: FormatConfig\n  ) {\n    this.socket.addEventListener(\"error\", event => {\n      // In case the error event is followed by a close event, we want the\n      // latter to be the one that disconnects the session as it contains more\n      // useful information.\n      setTimeout(\n        () =>\n          this.disconnect({\n            reason: \"error\",\n            message: \"The connection was closed due to a socket error.\",\n            context: event,\n          }),\n        0\n      );\n    });\n    this.socket.addEventListener(\"close\", event => {\n      this.disconnect(\n        event.code === 1000\n          ? {\n              reason: \"agent\",\n              context: event,\n            }\n          : {\n              reason: \"error\",\n              message:\n                event.reason || \"The connection was closed by the server.\",\n              context: event,\n            }\n      );\n    });\n    this.socket.addEventListener(\"message\", event => {\n      try {\n        const parsedEvent = JSON.parse(event.data);\n        if (!isValidSocketEvent(parsedEvent)) {\n          return;\n        }\n\n        if (this.onMessageCallback) {\n          this.onMessageCallback(parsedEvent);\n        } else {\n          this.queue.push(parsedEvent);\n        }\n      } catch (_) {}\n    });\n  }\n\n  public close() {\n    this.socket.close();\n  }\n\n  public sendMessage(message: OutgoingSocketEvent) {\n    this.socket.send(JSON.stringify(message));\n  }\n\n  public onMessage(callback: OnMessageCallback) {\n    this.onMessageCallback = callback;\n    this.queue.forEach(callback);\n    this.queue = [];\n  }\n\n  public onDisconnect(callback: OnDisconnectCallback) {\n    this.onDisconnectCallback = callback;\n    if (this.disconnectionDetails) {\n      callback(this.disconnectionDetails);\n    }\n  }\n\n  private disconnect(details: DisconnectionDetails) {\n    if (!this.disconnectionDetails) {\n      this.disconnectionDetails = details;\n      this.onDisconnectCallback?.(details);\n    }\n  }\n}\n\nfunction parseFormat(format: string): FormatConfig {\n  const [formatPart, sampleRatePart] = format.split(\"_\");\n  if (![\"pcm\", \"ulaw\"].includes(formatPart)) {\n    throw new Error(`Invalid format: ${format}`);\n  }\n\n  const sampleRate = parseInt(sampleRatePart);\n  if (isNaN(sampleRate)) {\n    throw new Error(`Invalid sample rate: ${sampleRatePart}`);\n  }\n\n  return {\n    format: formatPart as FormatConfig[\"format\"],\n    sampleRate,\n  };\n}\n","import { arrayBufferToBase64, base64ToArrayBuffer } from \"./utils/audio\";\nimport { Input, InputConfig } from \"./utils/input\";\nimport { Output } from \"./utils/output\";\nimport {\n  Connection,\n  DisconnectionDetails,\n  OnDisconnectCallback,\n  SessionConfig,\n} from \"./utils/connection\";\nimport { ClientToolCallEvent, IncomingSocketEvent } from \"./utils/events\";\nimport { isAndroidDevice, isIosDevice } from \"./utils/compatibility\";\n\nexport type { InputConfig } from \"./utils/input\";\nexport type { IncomingSocketEvent } from \"./utils/events\";\nexport type { SessionConfig, DisconnectionDetails, Language } from \"./utils/connection\";\nexport type Role = \"user\" | \"ai\";\nexport type Mode = \"speaking\" | \"listening\";\nexport type Status =\n  | \"connecting\"\n  | \"connected\"\n  | \"disconnecting\"\n  | \"disconnected\";\nexport type Options = SessionConfig &\n  Callbacks &\n  ClientToolsConfig &\n  InputConfig;\nexport type ClientToolsConfig = {\n  clientTools: Record<\n    string,\n    (\n      parameters: any\n    ) => Promise<string | number | void> | string | number | void\n  >;\n};\nexport type Callbacks = {\n  onConnect: (props: { conversationId: string }) => void;\n  // internal debug events, not to be used\n  onDebug: (props: any) => void;\n  onDisconnect: OnDisconnectCallback;\n  onError: (message: string, context?: any) => void;\n  onMessage: (props: { message: string; source: Role }) => void;\n  onAudio: (base64Audio: string) => void;\n  onModeChange: (prop: { mode: Mode }) => void;\n  onStatusChange: (prop: { status: Status }) => void;\n  onCanSendFeedbackChange: (prop: { canSendFeedback: boolean }) => void;\n  onUnhandledClientToolCall?: (\n    params: ClientToolCallEvent[\"client_tool_call\"]\n  ) => void;\n};\n\nconst defaultClientTools = { clientTools: {} };\nconst defaultCallbacks: Callbacks = {\n  onConnect: () => {},\n  onDebug: () => {},\n  onDisconnect: () => {},\n  onError: () => {},\n  onMessage: () => {},\n  onAudio: () => {},\n  onModeChange: () => {},\n  onStatusChange: () => {},\n  onCanSendFeedbackChange: () => {},\n};\n\nconst HTTPS_API_ORIGIN = \"https://api.elevenlabs.io\";\n\nexport class Conversation {\n  public static async startSession(\n    options: SessionConfig &\n      Partial<Callbacks> &\n      Partial<ClientToolsConfig> &\n      Partial<InputConfig>\n  ): Promise<Conversation> {\n    const fullOptions: Options = {\n      ...defaultClientTools,\n      ...defaultCallbacks,\n      ...options,\n    };\n\n    fullOptions.onStatusChange({ status: \"connecting\" });\n    fullOptions.onCanSendFeedbackChange({ canSendFeedback: false });\n\n    let input: Input | null = null;\n    let connection: Connection | null = null;\n    let output: Output | null = null;\n    let preliminaryInputStream: MediaStream | null = null;\n\n    try {\n      // some browsers won't allow calling getSupportedConstraints or enumerateDevices\n      // before getting approval for microphone access\n      preliminaryInputStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n\n      const delayConfig = options.connectionDelay ?? {\n        default: 0,\n        // Give the Android AudioManager enough time to switch to the correct audio mode\n        android: 3_000,\n      };\n      let delay = delayConfig.default;\n      if (isAndroidDevice()) {\n        delay = delayConfig.android ?? delay;\n      } else if (isIosDevice()) {\n        delay = delayConfig.ios ?? delay;\n      }\n\n      if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n\n      connection = await Connection.create(options);\n      [input, output] = await Promise.all([\n        Input.create({\n          ...connection.inputFormat,\n          preferHeadphonesForIosDevices: options.preferHeadphonesForIosDevices,\n        }),\n        Output.create(connection.outputFormat),\n      ]);\n\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      preliminaryInputStream = null;\n\n      return new Conversation(fullOptions, connection, input, output);\n    } catch (error) {\n      fullOptions.onStatusChange({ status: \"disconnected\" });\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      connection?.close();\n      await input?.close();\n      await output?.close();\n      throw error;\n    }\n  }\n\n  private lastInterruptTimestamp: number = 0;\n  private mode: Mode = \"listening\";\n  private status: Status = \"connecting\";\n  private inputFrequencyData?: Uint8Array;\n  private outputFrequencyData?: Uint8Array;\n  private volume: number = 1;\n  private currentEventId: number = 1;\n  private lastFeedbackEventId: number = 1;\n  private canSendFeedback: boolean = false;\n\n  private constructor(\n    private readonly options: Options,\n    private readonly connection: Connection,\n    public readonly input: Input,\n    public readonly output: Output\n  ) {\n    this.options.onConnect({ conversationId: connection.conversationId });\n\n    this.connection.onDisconnect(this.endSessionWithDetails);\n    this.connection.onMessage(this.onMessage);\n\n    this.input.worklet.port.onmessage = this.onInputWorkletMessage;\n    this.output.worklet.port.onmessage = this.onOutputWorkletMessage;\n    this.updateStatus(\"connected\");\n  }\n\n  public endSession = () => this.endSessionWithDetails({ reason: \"user\" });\n\n  private endSessionWithDetails = async (details: DisconnectionDetails) => {\n    if (this.status !== \"connected\" && this.status !== \"connecting\") return;\n    this.updateStatus(\"disconnecting\");\n\n    this.connection.close();\n    await this.input.close();\n    await this.output.close();\n\n    this.updateStatus(\"disconnected\");\n    this.options.onDisconnect(details);\n  };\n\n  private updateMode = (mode: Mode) => {\n    if (mode !== this.mode) {\n      this.mode = mode;\n      this.options.onModeChange({ mode });\n    }\n  };\n\n  private updateStatus = (status: Status) => {\n    if (status !== this.status) {\n      this.status = status;\n      this.options.onStatusChange({ status });\n    }\n  };\n\n  private updateCanSendFeedback = () => {\n    const canSendFeedback = this.currentEventId !== this.lastFeedbackEventId;\n    if (this.canSendFeedback !== canSendFeedback) {\n      this.canSendFeedback = canSendFeedback;\n      this.options.onCanSendFeedbackChange({ canSendFeedback });\n    }\n  };\n\n  private onMessage = async (parsedEvent: IncomingSocketEvent) => {\n    switch (parsedEvent.type) {\n      case \"interruption\": {\n        if (parsedEvent.interruption_event) {\n          this.lastInterruptTimestamp = parsedEvent.interruption_event.event_id;\n        }\n        this.fadeOutAudio();\n        return;\n      }\n\n      case \"agent_response\": {\n        this.options.onMessage({\n          source: \"ai\",\n          message: parsedEvent.agent_response_event.agent_response,\n        });\n        return;\n      }\n\n      case \"user_transcript\": {\n        this.options.onMessage({\n          source: \"user\",\n          message: parsedEvent.user_transcription_event.user_transcript,\n        });\n        return;\n      }\n\n      case \"internal_tentative_agent_response\": {\n        this.options.onDebug({\n          type: \"tentative_agent_response\",\n          response:\n            parsedEvent.tentative_agent_response_internal_event\n              .tentative_agent_response,\n        });\n        return;\n      }\n\n      case \"client_tool_call\": {\n        console.info(\"Received client tool call request\", parsedEvent.client_tool_call);\n        if (\n          this.options.clientTools.hasOwnProperty(\n            parsedEvent.client_tool_call.tool_name\n          )\n        ) {\n          try {\n            const result =\n              (await this.options.clientTools[\n                parsedEvent.client_tool_call.tool_name\n              ](parsedEvent.client_tool_call.parameters)) ??\n              \"Client tool execution successful.\"; // default client-tool call response\n\n            // The API expects result to be a string, so we need to convert it if it's not already a string\n            const formattedResult = typeof result === 'object' ? JSON.stringify(result) : String(result);\n\n            this.connection.sendMessage({\n              type: \"client_tool_result\",\n              tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n              result: formattedResult,\n              is_error: false,\n            });\n          } catch (e) {\n            this.onError(\n              \"Client tool execution failed with following error: \" +\n                (e as Error)?.message,\n              {\n                clientToolName: parsedEvent.client_tool_call.tool_name,\n              }\n            );\n            this.connection.sendMessage({\n              type: \"client_tool_result\",\n              tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n              result: \"Client tool execution failed: \" + (e as Error)?.message,\n              is_error: true,\n            });\n          }\n        } else {\n          if (this.options.onUnhandledClientToolCall) {\n            this.options.onUnhandledClientToolCall(parsedEvent.client_tool_call);\n  \n            return;\n          }\n  \n          this.onError(\n            `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            {\n              clientToolName: parsedEvent.client_tool_call.tool_name,\n            }\n          );\n          this.connection.sendMessage({\n            type: \"client_tool_result\",\n            tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n            result: `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            is_error: true,\n          });\n        }\n\n        return;\n      }\n\n      case \"audio\": {\n\n        if (this.lastInterruptTimestamp <= parsedEvent.audio_event.event_id) {\n          this.options.onAudio(parsedEvent.audio_event.audio_base_64)\n          this.addAudioBase64Chunk(parsedEvent.audio_event.audio_base_64);\n          this.currentEventId = parsedEvent.audio_event.event_id;\n          this.updateCanSendFeedback();\n          this.updateMode(\"speaking\");\n        }\n        return;\n      }\n\n      case \"ping\": {\n        this.connection.sendMessage({\n          type: \"pong\",\n          event_id: parsedEvent.ping_event.event_id,\n        });\n        // parsedEvent.ping_event.ping_ms can be used on client side, for example\n        // to warn if ping is too high that experience might be degraded.\n        return;\n      }\n\n      // unhandled events are expected to be internal events\n      default: {\n        this.options.onDebug(parsedEvent);\n        return;\n      }\n    }\n  };\n\n  private onInputWorkletMessage = (event: MessageEvent): void => {\n    const rawAudioPcmData = event.data[0];\n    const maxVolume = event.data[1];\n\n    // check if the sound was loud enough, so we don't send unnecessary chunks\n    // then forward audio to websocket\n    //if (maxVolume > 0.001) {\n    if (this.status === \"connected\") {\n      this.connection.sendMessage({\n        user_audio_chunk: arrayBufferToBase64(rawAudioPcmData.buffer),\n        //sample_rate: this.inputAudioContext?.inputSampleRate || this.inputSampleRate,\n      });\n    }\n    //}\n  };\n\n  private onOutputWorkletMessage = ({ data }: MessageEvent): void => {\n    if (data.type === \"process\") {\n      this.updateMode(data.finished ? \"listening\" : \"speaking\");\n    }\n  };\n\n  private addAudioBase64Chunk = (chunk: string) => {\n    this.output.gain.gain.value = this.volume;\n    this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    this.output.worklet.port.postMessage({\n      type: \"buffer\",\n      buffer: base64ToArrayBuffer(chunk),\n    });\n  };\n\n  private fadeOutAudio = () => {\n    // mute agent\n    this.updateMode(\"listening\");\n    this.output.worklet.port.postMessage({ type: \"interrupt\" });\n    this.output.gain.gain.exponentialRampToValueAtTime(\n      0.0001,\n      this.output.context.currentTime + 2\n    );\n\n    // reset volume back\n    setTimeout(() => {\n      this.output.gain.gain.value = this.volume;\n      this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    }, 2000); // Adjust the duration as needed\n  };\n\n  private onError = (message: string, context?: any) => {\n    console.error(message, context);\n    this.options.onError(message, context);\n  };\n\n  private calculateVolume = (frequencyData: Uint8Array) => {\n    if (frequencyData.length === 0) {\n      return 0;\n    }\n\n    // TODO: Currently this averages all frequencies, but we should probably\n    // bias towards the frequencies that are more typical for human voice\n    let volume = 0;\n    for (let i = 0; i < frequencyData.length; i++) {\n      volume += frequencyData[i] / 255;\n    }\n    volume /= frequencyData.length;\n\n    return volume < 0 ? 0 : volume > 1 ? 1 : volume;\n  };\n\n  public getId = () => this.connection.conversationId;\n\n  public isOpen = () => this.status === \"connected\";\n\n  public setVolume = ({ volume }: { volume: number }) => {\n    this.volume = volume;\n  };\n\n  public setMicMuted = (isMuted: boolean) => {\n    this.input.setMuted(isMuted);\n  }\n\n  public getInputByteFrequencyData = () => {\n    this.inputFrequencyData ??= new Uint8Array(\n      this.input.analyser.frequencyBinCount\n    );\n    this.input.analyser.getByteFrequencyData(this.inputFrequencyData);\n    return this.inputFrequencyData;\n  };\n\n  public getOutputByteFrequencyData = () => {\n    this.outputFrequencyData ??= new Uint8Array(\n      this.output.analyser.frequencyBinCount\n    );\n    this.output.analyser.getByteFrequencyData(this.outputFrequencyData);\n    return this.outputFrequencyData;\n  };\n\n  public getInputVolume = () => {\n    return this.calculateVolume(this.getInputByteFrequencyData());\n  };\n\n  public getOutputVolume = () => {\n    return this.calculateVolume(this.getOutputByteFrequencyData());\n  };\n\n  public sendFeedback = (like: boolean) => {\n    if (!this.canSendFeedback) {\n      console.warn(\n        this.lastFeedbackEventId === 0\n          ? \"Cannot send feedback: the conversation has not started yet.\"\n          : \"Cannot send feedback: feedback has already been sent for the current response.\"\n      );\n      return;\n    }\n\n    this.connection.sendMessage({\n      type: \"feedback\",\n      score: like ? \"like\" : \"dislike\",\n      event_id: this.currentEventId,\n    });\n    this.lastFeedbackEventId = this.currentEventId;\n    this.updateCanSendFeedback();\n  };\n}\n\nexport function postOverallFeedback(\n  conversationId: string,\n  like: boolean,\n  origin: string = HTTPS_API_ORIGIN\n) {\n  return fetch(`${origin}/v1/convai/conversations/${conversationId}/feedback`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      feedback: like ? \"like\" : \"dislike\",\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n}\n"],"names":["base64ToArrayBuffer","base64","binaryString","window","atob","len","length","bytes","Uint8Array","i","charCodeAt","buffer","blob","Blob","type","rawAudioProcessor","URL","createObjectURL","isIosDevice","includes","navigator","platform","userAgent","document","Input","context","analyser","worklet","inputStream","this","create","_ref","sampleRate","format","preferHeadphonesForIosDevices","Promise","resolve","_temp4","_temp2","audioWorklet","addModule","then","mediaDevices","getUserMedia","audio","options","_navigator$mediaDevic","source","createMediaStreamSource","AudioWorkletNode","port","postMessage","connect","resume","supportsSampleRateConstraint","getSupportedConstraints","AudioContext","createAnalyser","_temp","ideal","echoCancellation","noiseSuppression","_temp3","enumerateDevices","availableDevices","idealDevice","find","d","kind","keyword","label","toLowerCase","deviceId","_catch","error","_inputStream","_context","getTracks","forEach","track","stop","close","e","reject","_proto","prototype","setMuted","isMuted","audioConcatProcessor","Output","gain","createGain","destination","isValidSocketEvent","event","Connection","socket","conversationId","inputFormat","outputFormat","_this","queue","disconnectionDetails","onDisconnectCallback","onMessageCallback","addEventListener","setTimeout","disconnect","reason","message","code","parsedEvent","JSON","parse","data","push","_","config","origin","_config$origin","url","signedUrl","agentId","protocols","authorization","WebSocket","_socket","_config$overrides$age","_config$overrides$age2","_config$overrides$age3","_config$overrides$tts","overridesEvent","overrides","conversation_config_override","agent","prompt","first_message","firstMessage","language","tts","voice_id","voiceId","customLlmExtraBody","custom_llm_extra_body","dynamicVariables","dynamic_variables","send","stringify","once","conversation_initiation_metadata_event","console","warn","conversationConfig","conversation_id","agent_output_audio_format","user_input_audio_format","parseFormat","_socket2","sendMessage","onMessage","callback","onDisconnect","details","_this$onDisconnectCal","call","_format$split","split","formatPart","sampleRatePart","Error","parseInt","isNaN","defaultClientTools","clientTools","defaultCallbacks","onConnect","onDebug","onError","onAudio","onModeChange","onStatusChange","onCanSendFeedbackChange","Conversation","connection","input","output","_this2","_this3","lastInterruptTimestamp","mode","status","inputFrequencyData","outputFrequencyData","volume","currentEventId","lastFeedbackEventId","canSendFeedback","endSession","endSessionWithDetails","updateStatus","updateMode","updateCanSendFeedback","interruption_event","event_id","fadeOutAudio","agent_response_event","agent_response","user_transcription_event","user_transcript","response","tentative_agent_response_internal_event","tentative_agent_response","info","client_tool_call","hasOwnProperty","tool_name","parameters","result","formattedResult","String","tool_call_id","is_error","clientToolName","onUnhandledClientToolCall","audio_event","audio_base_64","addAudioBase64Chunk","ping_event","onInputWorkletMessage","b","user_audio_chunk","btoa","fromCharCode","apply","onOutputWorkletMessage","finished","chunk","value","exponentialRampToValueAtTime","currentTime","calculateVolume","frequencyData","getId","isOpen","setVolume","_ref2","setMicMuted","getInputByteFrequencyData","_this$inputFrequencyD","frequencyBinCount","getByteFrequencyData","getOutputByteFrequencyData","getInputVolume","getOutputVolume","sendFeedback","like","score","onmessage","startSession","fullOptions","_extends","preliminaryInputStream","_options$connectionDe","_Connection$create","all","_Promise$all","_preliminaryInputStre","_delayConfig$android","delayConfig","connectionDelay","default","android","delay","test","_delayConfig$ios","ios","_preliminaryInputStre2","_connection","_input","_output","fetch","method","body","feedback","headers"],"mappings":"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"}