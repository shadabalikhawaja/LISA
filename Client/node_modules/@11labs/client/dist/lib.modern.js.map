{"version":3,"file":"lib.modern.js","sources":["../src/utils/audio.ts","../src/utils/rawAudioProcessor.ts","../src/utils/compatibility.ts","../src/utils/input.ts","../src/utils/audioConcatProcessor.ts","../src/utils/output.ts","../src/utils/events.ts","../src/utils/connection.ts","../src/index.ts"],"sourcesContent":["export function arrayBufferToBase64(b: ArrayBufferLike) {\n  const buffer = new Uint8Array(b);\n  // @ts-ignore\n  const base64Data = window.btoa(String.fromCharCode(...buffer));\n  return base64Data;\n}\n\nexport function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binaryString = window.atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n","/*\n * ulaw encoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nconst blob = new Blob(\n  [\n    // language=JavaScript\n    `\n      const BIAS = 0x84;\n      const CLIP = 32635;\n      const encodeTable = [\n        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\n        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\n      ];\n      \n      function encodeSample(sample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let muLawSample;\n        sign = (sample >> 8) & 0x80;\n        if (sign !== 0) sample = -sample;\n        sample = sample + BIAS;\n        if (sample > CLIP) sample = CLIP;\n        exponent = encodeTable[(sample>>7) & 0xFF];\n        mantissa = (sample >> (exponent+3)) & 0x0F;\n        muLawSample = ~(sign | (exponent << 4) | mantissa);\n        \n        return muLawSample;\n      }\n    \n      class RawAudioProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n                    \n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case \"setFormat\":\n                this.isMuted = false;\n                this.buffer = []; // Initialize an empty buffer\n                this.bufferSize = data.sampleRate / 4;\n                this.format = data.format;\n\n                if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\n                  globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\n                    this.resampler = resampler;\n                  });\n                }\n                break;\n              case \"setMuted\":\n                this.isMuted = data.isMuted;\n                break;\n            }\n          };\n        }\n        process(inputs) {\n          if (!this.buffer) {\n            return true;\n          }\n          \n          const input = inputs[0]; // Get the first input node\n          if (input.length > 0) {\n            let channelData = input[0]; // Get the first channel's data\n\n            // Resample the audio if necessary\n            if (this.resampler) {\n              channelData = this.resampler.full(channelData);\n            }\n\n            // Add channel data to the buffer\n            this.buffer.push(...channelData);\n            // Get max volume \n            let sum = 0.0;\n            for (let i = 0; i < channelData.length; i++) {\n              sum += channelData[i] * channelData[i];\n            }\n            const maxVolume = Math.sqrt(sum / channelData.length);\n            // Check if buffer size has reached or exceeded the threshold\n            if (this.buffer.length >= this.bufferSize) {\n              const float32Array = this.isMuted \n                ? new Float32Array(this.buffer.length)\n                : new Float32Array(this.buffer);\n\n              let encodedArray = this.format === \"ulaw\"\n                ? new Uint8Array(float32Array.length)\n                : new Int16Array(float32Array.length);\n\n              // Iterate through the Float32Array and convert each sample to PCM16\n              for (let i = 0; i < float32Array.length; i++) {\n                // Clamp the value to the range [-1, 1]\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\n\n                // Scale the sample to the range [-32768, 32767]\n                let value = sample < 0 ? sample * 32768 : sample * 32767;\n                if (this.format === \"ulaw\") {\n                  value = encodeSample(Math.round(value));\n                }\n\n                encodedArray[i] = value;\n              }\n\n              // Send the buffered data to the main script\n              this.port.postMessage([encodedArray, maxVolume]);\n\n              // Clear the buffer after sending\n              this.buffer = [];\n            }\n          }\n          return true; // Continue processing\n        }\n      }\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\n  `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const rawAudioProcessor = URL.createObjectURL(blob);\n","export function isIosDevice() {\n  return (\n    [\n      \"iPad Simulator\",\n      \"iPhone Simulator\",\n      \"iPod Simulator\",\n      \"iPad\",\n      \"iPhone\",\n      \"iPod\",\n    ].includes(navigator.platform) ||\n    // iPad on iOS 13 detection\n    (navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document)\n  );\n}\n\nexport function isAndroidDevice() {\n  return /android/i.test(navigator.userAgent);\n}\n","import { rawAudioProcessor } from \"./rawAudioProcessor\";\nimport { FormatConfig } from \"./connection\";\nimport { isIosDevice } from \"./compatibility\";\n\nexport type InputConfig = {\n  preferHeadphonesForIosDevices?: boolean;\n};\n\nconst LIBSAMPLERATE_JS =\n  \"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\";\n\nexport class Input {\n  public static async create({\n    sampleRate,\n    format,\n    preferHeadphonesForIosDevices,\n  }: FormatConfig & InputConfig): Promise<Input> {\n    let context: AudioContext | null = null;\n    let inputStream: MediaStream | null = null;\n\n    try {\n      const options: MediaTrackConstraints = {\n        sampleRate: { ideal: sampleRate },\n        echoCancellation: { ideal: true },\n        noiseSuppression: { ideal: true },\n      };\n\n      if (isIosDevice() && preferHeadphonesForIosDevices) {\n        const availableDevices =\n          await window.navigator.mediaDevices.enumerateDevices();\n        const idealDevice = availableDevices.find(\n          d =>\n            // cautious to include \"bluetooth\" in the search\n            // as might trigger bluetooth speakers\n            d.kind === \"audioinput\" &&\n            [\"airpod\", \"headphone\", \"earphone\"].find(keyword =>\n              d.label.toLowerCase().includes(keyword)\n            )\n        );\n        if (idealDevice) {\n          options.deviceId = { ideal: idealDevice.deviceId };\n        }\n      }\n\n      const supportsSampleRateConstraint =\n        navigator.mediaDevices.getSupportedConstraints().sampleRate;\n\n      context = new window.AudioContext(\n        supportsSampleRateConstraint ? { sampleRate } : {}\n      );\n      const analyser = context.createAnalyser();\n      if (!supportsSampleRateConstraint) {\n        await context.audioWorklet.addModule(LIBSAMPLERATE_JS);\n      }\n      await context.audioWorklet.addModule(rawAudioProcessor);\n\n      inputStream = await navigator.mediaDevices.getUserMedia({\n        audio: options,\n      });\n\n      const source = context.createMediaStreamSource(inputStream);\n      const worklet = new AudioWorkletNode(context, \"raw-audio-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format, sampleRate });\n\n      source.connect(analyser);\n      analyser.connect(worklet);\n\n      await context.resume();\n\n      return new Input(context, analyser, worklet, inputStream);\n    } catch (error) {\n      inputStream?.getTracks().forEach(track => track.stop());\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly worklet: AudioWorkletNode,\n    public readonly inputStream: MediaStream\n  ) {}\n\n  public async close() {\n    this.inputStream.getTracks().forEach(track => track.stop());\n    await this.context.close();\n  }\n\n  public setMuted(isMuted: boolean) {\n    this.worklet.port.postMessage({ type: \"setMuted\", isMuted });\n  }\n}\n","/*\n * ulaw decoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nconst blob = new Blob(\n  [\n    // language=JavaScript\n    `\n      const decodeTable = [0,132,396,924,1980,4092,8316,16764];\n      \n      export function decodeSample(muLawSample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let sample;\n        muLawSample = ~muLawSample;\n        sign = (muLawSample & 0x80);\n        exponent = (muLawSample >> 4) & 0x07;\n        mantissa = muLawSample & 0x0F;\n        sample = decodeTable[exponent] + (mantissa << (exponent+3));\n        if (sign !== 0) sample = -sample;\n\n        return sample;\n      }\n      \n      class AudioConcatProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffers = []; // Initialize an empty buffer\n          this.cursor = 0;\n          this.currentBuffer = null;\n          this.wasInterrupted = false;\n          this.finished = false;\n          \n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case \"setFormat\":\n                this.format = data.format;\n                break;\n              case \"buffer\":\n                this.wasInterrupted = false;\n                this.buffers.push(\n                  this.format === \"ulaw\"\n                    ? new Uint8Array(data.buffer)\n                    : new Int16Array(data.buffer)\n                );\n                break;\n              case \"interrupt\":\n                this.wasInterrupted = true;\n                break;\n              case \"clearInterrupted\":\n                if (this.wasInterrupted) {\n                  this.wasInterrupted = false;\n                  this.buffers = [];\n                  this.currentBuffer = null;\n                }\n            }\n          };\n        }\n        process(_, outputs) {\n          let finished = false;\n          const output = outputs[0][0];\n          for (let i = 0; i < output.length; i++) {\n            if (!this.currentBuffer) {\n              if (this.buffers.length === 0) {\n                finished = true;\n                break;\n              }\n              this.currentBuffer = this.buffers.shift();\n              this.cursor = 0;\n            }\n\n            let value = this.currentBuffer[this.cursor];\n            if (this.format === \"ulaw\") {\n              value = decodeSample(value);\n            }\n            output[i] = value / 32768;\n            this.cursor++;\n\n            if (this.cursor >= this.currentBuffer.length) {\n              this.currentBuffer = null;\n            }\n          }\n\n          if (this.finished !== finished) {\n            this.finished = finished;\n            this.port.postMessage({ type: \"process\", finished });\n          }\n\n          return true; // Continue processing\n        }\n      }\n\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\n    `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const audioConcatProcessor = URL.createObjectURL(blob);\n","import { audioConcatProcessor } from \"./audioConcatProcessor\";\nimport { FormatConfig } from \"./connection\";\n\nexport class Output {\n  public static async create({\n    sampleRate,\n    format,\n  }: FormatConfig): Promise<Output> {\n    let context: AudioContext | null = null;\n    try {\n      context = new AudioContext({ sampleRate });\n      const analyser = context.createAnalyser();\n      const gain = context.createGain();\n      gain.connect(analyser);\n      analyser.connect(context.destination);\n      await context.audioWorklet.addModule(audioConcatProcessor);\n      const worklet = new AudioWorkletNode(context, \"audio-concat-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format });\n      worklet.connect(gain);\n\n      await context.resume();\n\n      return new Output(context, analyser, gain, worklet);\n    } catch (error) {\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly gain: GainNode,\n    public readonly worklet: AudioWorkletNode\n  ) {}\n\n  public async close() {\n    await this.context.close();\n  }\n}\n","import { Language } from \"./connection\";\n\nexport type UserTranscriptionEvent = {\n  type: \"user_transcript\";\n  user_transcription_event: { user_transcript: string };\n};\nexport type AgentResponseEvent = {\n  type: \"agent_response\";\n  agent_response_event: { agent_response: string };\n};\nexport type AgentAudioEvent = {\n  type: \"audio\";\n  audio_event: {\n    audio_base_64: string;\n    event_id: number;\n  };\n};\nexport type InterruptionEvent = {\n  type: \"interruption\";\n  interruption_event: {\n    event_id: number;\n  };\n};\nexport type InternalTentativeAgentResponseEvent = {\n  type: \"internal_tentative_agent_response\";\n  tentative_agent_response_internal_event: {\n    tentative_agent_response: string;\n  };\n};\nexport type ConfigEvent = {\n  type: \"conversation_initiation_metadata\";\n  conversation_initiation_metadata_event: {\n    conversation_id: string;\n    agent_output_audio_format: string;\n    user_input_audio_format?: string;\n  };\n};\nexport type PingEvent = {\n  type: \"ping\";\n  ping_event: {\n    event_id: number;\n    ping_ms?: number;\n  };\n};\nexport type ClientToolCallEvent = {\n  type: \"client_tool_call\";\n  client_tool_call: {\n    tool_name: string;\n    tool_call_id: string;\n    parameters: any;\n    expects_response: boolean;\n  };\n};\n\n// TODO correction missing\nexport type IncomingSocketEvent =\n  | UserTranscriptionEvent\n  | AgentResponseEvent\n  | AgentAudioEvent\n  | InterruptionEvent\n  | InternalTentativeAgentResponseEvent\n  | ConfigEvent\n  | PingEvent\n  | ClientToolCallEvent;\n\nexport type PongEvent = {\n  type: \"pong\";\n  event_id: number;\n};\nexport type UserAudioEvent = {\n  user_audio_chunk: string;\n};\nexport type UserFeedbackEvent = {\n  type: \"feedback\";\n  score: \"like\" | \"dislike\";\n  event_id: number;\n};\nexport type ClientToolResultEvent = {\n  type: \"client_tool_result\";\n  tool_call_id: string;\n  result: any;\n  is_error: boolean;\n};\nexport type InitiationClientDataEvent = {\n  type: \"conversation_initiation_client_data\";\n  conversation_config_override?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      first_message?: string;\n      language?: Language;\n    };\n    tts?: {\n      voice_id?: string;\n    };\n  };\n  custom_llm_extra_body?: any;\n  dynamic_variables?: Record<string, string | number | boolean>;\n};\nexport type OutgoingSocketEvent =\n  | PongEvent\n  | UserAudioEvent\n  | InitiationClientDataEvent\n  | UserFeedbackEvent\n  | ClientToolResultEvent;\n\nexport function isValidSocketEvent(event: any): event is IncomingSocketEvent {\n  return !!event.type;\n}\n","import {\n  InitiationClientDataEvent,\n  ConfigEvent,\n  isValidSocketEvent,\n  OutgoingSocketEvent,\n  IncomingSocketEvent,\n} from \"./events\";\n\nconst MAIN_PROTOCOL = \"convai\";\n\nexport type Language =\n  | \"en\"\n  | \"ja\"\n  | \"zh\"\n  | \"de\"\n  | \"hi\"\n  | \"fr\"\n  | \"ko\"\n  | \"pt\"\n  | \"it\"\n  | \"es\"\n  | \"id\"\n  | \"nl\"\n  | \"tr\"\n  | \"pl\"\n  | \"sv\"\n  | \"bg\"\n  | \"ro\"\n  | \"ar\"\n  | \"cs\"\n  | \"el\"\n  | \"fi\"\n  | \"ms\"\n  | \"da\"\n  | \"ta\"\n  | \"uk\"\n  | \"ru\"\n  | \"hu\"\n  | \"no\"\n  | \"vi\";\nexport type SessionConfig = {\n  origin?: string;\n  authorization?: string;\n  overrides?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      firstMessage?: string;\n      language?: Language;\n    };\n    tts?: {\n      voiceId?: string;\n    };\n  };\n  customLlmExtraBody?: any;\n  dynamicVariables?: Record<string, string | number | boolean>;\n  connectionDelay?: {\n    default: number;\n    android?: number;\n    ios?: number;\n  };\n} & (\n  | { signedUrl: string; agentId?: undefined }\n  | { agentId: string; signedUrl?: undefined }\n);\nexport type FormatConfig = {\n  format: \"pcm\" | \"ulaw\";\n  sampleRate: number;\n};\nexport type DisconnectionDetails =\n  | {\n      reason: \"error\";\n      message: string;\n      context: Event;\n    }\n  | {\n      reason: \"agent\";\n      context: CloseEvent;\n    }\n  | {\n      reason: \"user\";\n    };\nexport type OnDisconnectCallback = (details: DisconnectionDetails) => void;\nexport type OnMessageCallback = (event: IncomingSocketEvent) => void;\n\nconst WSS_API_ORIGIN = \"wss://api.elevenlabs.io\";\nconst WSS_API_PATHNAME = \"/v1/convai/conversation?agent_id=\";\n\nexport class Connection {\n  public static async create(config: SessionConfig): Promise<Connection> {\n    let socket: WebSocket | null = null;\n\n    try {\n      const origin = config.origin ?? WSS_API_ORIGIN;\n      const url = config.signedUrl\n        ? config.signedUrl\n        : origin + WSS_API_PATHNAME + config.agentId;\n\n      const protocols = [MAIN_PROTOCOL];\n      if (config.authorization) {\n        protocols.push(`bearer.${config.authorization}`);\n      }\n      socket = new WebSocket(url, protocols);\n      const conversationConfig = await new Promise<\n        ConfigEvent[\"conversation_initiation_metadata_event\"]\n      >((resolve, reject) => {\n        socket!.addEventListener(\n          \"open\",\n          () => {\n            const overridesEvent: InitiationClientDataEvent = {\n              type: \"conversation_initiation_client_data\",\n            };\n\n            if (config.overrides) {\n              overridesEvent.conversation_config_override = {\n                agent: {\n                  prompt: config.overrides.agent?.prompt,\n                  first_message: config.overrides.agent?.firstMessage,\n                  language: config.overrides.agent?.language,\n                },\n                tts: {\n                  voice_id: config.overrides.tts?.voiceId,\n                },\n              };\n            }\n\n            if (config.customLlmExtraBody) {\n              overridesEvent.custom_llm_extra_body = config.customLlmExtraBody;\n            }\n\n            if (config.dynamicVariables) {\n              overridesEvent.dynamic_variables = config.dynamicVariables;\n            }\n\n            socket?.send(JSON.stringify(overridesEvent));\n          },\n          { once: true }\n        );\n        socket!.addEventListener(\"error\", event => {\n          // In case the error event is followed by a close event, we want the\n          // latter to be the one that rejects the promise as it contains more\n          // useful information.\n          setTimeout(() => reject(event), 0);\n        });\n        socket!.addEventListener(\"close\", reject);\n        socket!.addEventListener(\n          \"message\",\n          (event: MessageEvent) => {\n            const message = JSON.parse(event.data);\n\n            if (!isValidSocketEvent(message)) {\n              return;\n            }\n\n            if (message.type === \"conversation_initiation_metadata\") {\n              resolve(message.conversation_initiation_metadata_event);\n            } else {\n              console.warn(\n                \"First received message is not conversation metadata.\"\n              );\n            }\n          },\n          { once: true }\n        );\n      });\n\n      const {\n        conversation_id,\n        agent_output_audio_format,\n        user_input_audio_format,\n      } = conversationConfig;\n\n      const inputFormat = parseFormat(user_input_audio_format ?? \"pcm_16000\");\n      const outputFormat = parseFormat(agent_output_audio_format);\n\n      return new Connection(socket, conversation_id, inputFormat, outputFormat);\n    } catch (error) {\n      socket?.close();\n      throw error;\n    }\n  }\n\n  private queue: IncomingSocketEvent[] = [];\n  private disconnectionDetails: DisconnectionDetails | null = null;\n  private onDisconnectCallback: OnDisconnectCallback | null = null;\n  private onMessageCallback: OnMessageCallback | null = null;\n\n  private constructor(\n    public readonly socket: WebSocket,\n    public readonly conversationId: string,\n    public readonly inputFormat: FormatConfig,\n    public readonly outputFormat: FormatConfig\n  ) {\n    this.socket.addEventListener(\"error\", event => {\n      // In case the error event is followed by a close event, we want the\n      // latter to be the one that disconnects the session as it contains more\n      // useful information.\n      setTimeout(\n        () =>\n          this.disconnect({\n            reason: \"error\",\n            message: \"The connection was closed due to a socket error.\",\n            context: event,\n          }),\n        0\n      );\n    });\n    this.socket.addEventListener(\"close\", event => {\n      this.disconnect(\n        event.code === 1000\n          ? {\n              reason: \"agent\",\n              context: event,\n            }\n          : {\n              reason: \"error\",\n              message:\n                event.reason || \"The connection was closed by the server.\",\n              context: event,\n            }\n      );\n    });\n    this.socket.addEventListener(\"message\", event => {\n      try {\n        const parsedEvent = JSON.parse(event.data);\n        if (!isValidSocketEvent(parsedEvent)) {\n          return;\n        }\n\n        if (this.onMessageCallback) {\n          this.onMessageCallback(parsedEvent);\n        } else {\n          this.queue.push(parsedEvent);\n        }\n      } catch (_) {}\n    });\n  }\n\n  public close() {\n    this.socket.close();\n  }\n\n  public sendMessage(message: OutgoingSocketEvent) {\n    this.socket.send(JSON.stringify(message));\n  }\n\n  public onMessage(callback: OnMessageCallback) {\n    this.onMessageCallback = callback;\n    this.queue.forEach(callback);\n    this.queue = [];\n  }\n\n  public onDisconnect(callback: OnDisconnectCallback) {\n    this.onDisconnectCallback = callback;\n    if (this.disconnectionDetails) {\n      callback(this.disconnectionDetails);\n    }\n  }\n\n  private disconnect(details: DisconnectionDetails) {\n    if (!this.disconnectionDetails) {\n      this.disconnectionDetails = details;\n      this.onDisconnectCallback?.(details);\n    }\n  }\n}\n\nfunction parseFormat(format: string): FormatConfig {\n  const [formatPart, sampleRatePart] = format.split(\"_\");\n  if (![\"pcm\", \"ulaw\"].includes(formatPart)) {\n    throw new Error(`Invalid format: ${format}`);\n  }\n\n  const sampleRate = parseInt(sampleRatePart);\n  if (isNaN(sampleRate)) {\n    throw new Error(`Invalid sample rate: ${sampleRatePart}`);\n  }\n\n  return {\n    format: formatPart as FormatConfig[\"format\"],\n    sampleRate,\n  };\n}\n","import { arrayBufferToBase64, base64ToArrayBuffer } from \"./utils/audio\";\nimport { Input, InputConfig } from \"./utils/input\";\nimport { Output } from \"./utils/output\";\nimport {\n  Connection,\n  DisconnectionDetails,\n  OnDisconnectCallback,\n  SessionConfig,\n} from \"./utils/connection\";\nimport { ClientToolCallEvent, IncomingSocketEvent } from \"./utils/events\";\nimport { isAndroidDevice, isIosDevice } from \"./utils/compatibility\";\n\nexport type { InputConfig } from \"./utils/input\";\nexport type { IncomingSocketEvent } from \"./utils/events\";\nexport type { SessionConfig, DisconnectionDetails, Language } from \"./utils/connection\";\nexport type Role = \"user\" | \"ai\";\nexport type Mode = \"speaking\" | \"listening\";\nexport type Status =\n  | \"connecting\"\n  | \"connected\"\n  | \"disconnecting\"\n  | \"disconnected\";\nexport type Options = SessionConfig &\n  Callbacks &\n  ClientToolsConfig &\n  InputConfig;\nexport type ClientToolsConfig = {\n  clientTools: Record<\n    string,\n    (\n      parameters: any\n    ) => Promise<string | number | void> | string | number | void\n  >;\n};\nexport type Callbacks = {\n  onConnect: (props: { conversationId: string }) => void;\n  // internal debug events, not to be used\n  onDebug: (props: any) => void;\n  onDisconnect: OnDisconnectCallback;\n  onError: (message: string, context?: any) => void;\n  onMessage: (props: { message: string; source: Role }) => void;\n  onAudio: (base64Audio: string) => void;\n  onModeChange: (prop: { mode: Mode }) => void;\n  onStatusChange: (prop: { status: Status }) => void;\n  onCanSendFeedbackChange: (prop: { canSendFeedback: boolean }) => void;\n  onUnhandledClientToolCall?: (\n    params: ClientToolCallEvent[\"client_tool_call\"]\n  ) => void;\n};\n\nconst defaultClientTools = { clientTools: {} };\nconst defaultCallbacks: Callbacks = {\n  onConnect: () => {},\n  onDebug: () => {},\n  onDisconnect: () => {},\n  onError: () => {},\n  onMessage: () => {},\n  onAudio: () => {},\n  onModeChange: () => {},\n  onStatusChange: () => {},\n  onCanSendFeedbackChange: () => {},\n};\n\nconst HTTPS_API_ORIGIN = \"https://api.elevenlabs.io\";\n\nexport class Conversation {\n  public static async startSession(\n    options: SessionConfig &\n      Partial<Callbacks> &\n      Partial<ClientToolsConfig> &\n      Partial<InputConfig>\n  ): Promise<Conversation> {\n    const fullOptions: Options = {\n      ...defaultClientTools,\n      ...defaultCallbacks,\n      ...options,\n    };\n\n    fullOptions.onStatusChange({ status: \"connecting\" });\n    fullOptions.onCanSendFeedbackChange({ canSendFeedback: false });\n\n    let input: Input | null = null;\n    let connection: Connection | null = null;\n    let output: Output | null = null;\n    let preliminaryInputStream: MediaStream | null = null;\n\n    try {\n      // some browsers won't allow calling getSupportedConstraints or enumerateDevices\n      // before getting approval for microphone access\n      preliminaryInputStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n\n      const delayConfig = options.connectionDelay ?? {\n        default: 0,\n        // Give the Android AudioManager enough time to switch to the correct audio mode\n        android: 3_000,\n      };\n      let delay = delayConfig.default;\n      if (isAndroidDevice()) {\n        delay = delayConfig.android ?? delay;\n      } else if (isIosDevice()) {\n        delay = delayConfig.ios ?? delay;\n      }\n\n      if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n\n      connection = await Connection.create(options);\n      [input, output] = await Promise.all([\n        Input.create({\n          ...connection.inputFormat,\n          preferHeadphonesForIosDevices: options.preferHeadphonesForIosDevices,\n        }),\n        Output.create(connection.outputFormat),\n      ]);\n\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      preliminaryInputStream = null;\n\n      return new Conversation(fullOptions, connection, input, output);\n    } catch (error) {\n      fullOptions.onStatusChange({ status: \"disconnected\" });\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      connection?.close();\n      await input?.close();\n      await output?.close();\n      throw error;\n    }\n  }\n\n  private lastInterruptTimestamp: number = 0;\n  private mode: Mode = \"listening\";\n  private status: Status = \"connecting\";\n  private inputFrequencyData?: Uint8Array;\n  private outputFrequencyData?: Uint8Array;\n  private volume: number = 1;\n  private currentEventId: number = 1;\n  private lastFeedbackEventId: number = 1;\n  private canSendFeedback: boolean = false;\n\n  private constructor(\n    private readonly options: Options,\n    private readonly connection: Connection,\n    public readonly input: Input,\n    public readonly output: Output\n  ) {\n    this.options.onConnect({ conversationId: connection.conversationId });\n\n    this.connection.onDisconnect(this.endSessionWithDetails);\n    this.connection.onMessage(this.onMessage);\n\n    this.input.worklet.port.onmessage = this.onInputWorkletMessage;\n    this.output.worklet.port.onmessage = this.onOutputWorkletMessage;\n    this.updateStatus(\"connected\");\n  }\n\n  public endSession = () => this.endSessionWithDetails({ reason: \"user\" });\n\n  private endSessionWithDetails = async (details: DisconnectionDetails) => {\n    if (this.status !== \"connected\" && this.status !== \"connecting\") return;\n    this.updateStatus(\"disconnecting\");\n\n    this.connection.close();\n    await this.input.close();\n    await this.output.close();\n\n    this.updateStatus(\"disconnected\");\n    this.options.onDisconnect(details);\n  };\n\n  private updateMode = (mode: Mode) => {\n    if (mode !== this.mode) {\n      this.mode = mode;\n      this.options.onModeChange({ mode });\n    }\n  };\n\n  private updateStatus = (status: Status) => {\n    if (status !== this.status) {\n      this.status = status;\n      this.options.onStatusChange({ status });\n    }\n  };\n\n  private updateCanSendFeedback = () => {\n    const canSendFeedback = this.currentEventId !== this.lastFeedbackEventId;\n    if (this.canSendFeedback !== canSendFeedback) {\n      this.canSendFeedback = canSendFeedback;\n      this.options.onCanSendFeedbackChange({ canSendFeedback });\n    }\n  };\n\n  private onMessage = async (parsedEvent: IncomingSocketEvent) => {\n    switch (parsedEvent.type) {\n      case \"interruption\": {\n        if (parsedEvent.interruption_event) {\n          this.lastInterruptTimestamp = parsedEvent.interruption_event.event_id;\n        }\n        this.fadeOutAudio();\n        return;\n      }\n\n      case \"agent_response\": {\n        this.options.onMessage({\n          source: \"ai\",\n          message: parsedEvent.agent_response_event.agent_response,\n        });\n        return;\n      }\n\n      case \"user_transcript\": {\n        this.options.onMessage({\n          source: \"user\",\n          message: parsedEvent.user_transcription_event.user_transcript,\n        });\n        return;\n      }\n\n      case \"internal_tentative_agent_response\": {\n        this.options.onDebug({\n          type: \"tentative_agent_response\",\n          response:\n            parsedEvent.tentative_agent_response_internal_event\n              .tentative_agent_response,\n        });\n        return;\n      }\n\n      case \"client_tool_call\": {\n        console.info(\"Received client tool call request\", parsedEvent.client_tool_call);\n        if (\n          this.options.clientTools.hasOwnProperty(\n            parsedEvent.client_tool_call.tool_name\n          )\n        ) {\n          try {\n            const result =\n              (await this.options.clientTools[\n                parsedEvent.client_tool_call.tool_name\n              ](parsedEvent.client_tool_call.parameters)) ??\n              \"Client tool execution successful.\"; // default client-tool call response\n\n            // The API expects result to be a string, so we need to convert it if it's not already a string\n            const formattedResult = typeof result === 'object' ? JSON.stringify(result) : String(result);\n\n            this.connection.sendMessage({\n              type: \"client_tool_result\",\n              tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n              result: formattedResult,\n              is_error: false,\n            });\n          } catch (e) {\n            this.onError(\n              \"Client tool execution failed with following error: \" +\n                (e as Error)?.message,\n              {\n                clientToolName: parsedEvent.client_tool_call.tool_name,\n              }\n            );\n            this.connection.sendMessage({\n              type: \"client_tool_result\",\n              tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n              result: \"Client tool execution failed: \" + (e as Error)?.message,\n              is_error: true,\n            });\n          }\n        } else {\n          if (this.options.onUnhandledClientToolCall) {\n            this.options.onUnhandledClientToolCall(parsedEvent.client_tool_call);\n  \n            return;\n          }\n  \n          this.onError(\n            `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            {\n              clientToolName: parsedEvent.client_tool_call.tool_name,\n            }\n          );\n          this.connection.sendMessage({\n            type: \"client_tool_result\",\n            tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n            result: `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            is_error: true,\n          });\n        }\n\n        return;\n      }\n\n      case \"audio\": {\n\n        if (this.lastInterruptTimestamp <= parsedEvent.audio_event.event_id) {\n          this.options.onAudio(parsedEvent.audio_event.audio_base_64)\n          this.addAudioBase64Chunk(parsedEvent.audio_event.audio_base_64);\n          this.currentEventId = parsedEvent.audio_event.event_id;\n          this.updateCanSendFeedback();\n          this.updateMode(\"speaking\");\n        }\n        return;\n      }\n\n      case \"ping\": {\n        this.connection.sendMessage({\n          type: \"pong\",\n          event_id: parsedEvent.ping_event.event_id,\n        });\n        // parsedEvent.ping_event.ping_ms can be used on client side, for example\n        // to warn if ping is too high that experience might be degraded.\n        return;\n      }\n\n      // unhandled events are expected to be internal events\n      default: {\n        this.options.onDebug(parsedEvent);\n        return;\n      }\n    }\n  };\n\n  private onInputWorkletMessage = (event: MessageEvent): void => {\n    const rawAudioPcmData = event.data[0];\n    const maxVolume = event.data[1];\n\n    // check if the sound was loud enough, so we don't send unnecessary chunks\n    // then forward audio to websocket\n    //if (maxVolume > 0.001) {\n    if (this.status === \"connected\") {\n      this.connection.sendMessage({\n        user_audio_chunk: arrayBufferToBase64(rawAudioPcmData.buffer),\n        //sample_rate: this.inputAudioContext?.inputSampleRate || this.inputSampleRate,\n      });\n    }\n    //}\n  };\n\n  private onOutputWorkletMessage = ({ data }: MessageEvent): void => {\n    if (data.type === \"process\") {\n      this.updateMode(data.finished ? \"listening\" : \"speaking\");\n    }\n  };\n\n  private addAudioBase64Chunk = (chunk: string) => {\n    this.output.gain.gain.value = this.volume;\n    this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    this.output.worklet.port.postMessage({\n      type: \"buffer\",\n      buffer: base64ToArrayBuffer(chunk),\n    });\n  };\n\n  private fadeOutAudio = () => {\n    // mute agent\n    this.updateMode(\"listening\");\n    this.output.worklet.port.postMessage({ type: \"interrupt\" });\n    this.output.gain.gain.exponentialRampToValueAtTime(\n      0.0001,\n      this.output.context.currentTime + 2\n    );\n\n    // reset volume back\n    setTimeout(() => {\n      this.output.gain.gain.value = this.volume;\n      this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    }, 2000); // Adjust the duration as needed\n  };\n\n  private onError = (message: string, context?: any) => {\n    console.error(message, context);\n    this.options.onError(message, context);\n  };\n\n  private calculateVolume = (frequencyData: Uint8Array) => {\n    if (frequencyData.length === 0) {\n      return 0;\n    }\n\n    // TODO: Currently this averages all frequencies, but we should probably\n    // bias towards the frequencies that are more typical for human voice\n    let volume = 0;\n    for (let i = 0; i < frequencyData.length; i++) {\n      volume += frequencyData[i] / 255;\n    }\n    volume /= frequencyData.length;\n\n    return volume < 0 ? 0 : volume > 1 ? 1 : volume;\n  };\n\n  public getId = () => this.connection.conversationId;\n\n  public isOpen = () => this.status === \"connected\";\n\n  public setVolume = ({ volume }: { volume: number }) => {\n    this.volume = volume;\n  };\n\n  public setMicMuted = (isMuted: boolean) => {\n    this.input.setMuted(isMuted);\n  }\n\n  public getInputByteFrequencyData = () => {\n    this.inputFrequencyData ??= new Uint8Array(\n      this.input.analyser.frequencyBinCount\n    );\n    this.input.analyser.getByteFrequencyData(this.inputFrequencyData);\n    return this.inputFrequencyData;\n  };\n\n  public getOutputByteFrequencyData = () => {\n    this.outputFrequencyData ??= new Uint8Array(\n      this.output.analyser.frequencyBinCount\n    );\n    this.output.analyser.getByteFrequencyData(this.outputFrequencyData);\n    return this.outputFrequencyData;\n  };\n\n  public getInputVolume = () => {\n    return this.calculateVolume(this.getInputByteFrequencyData());\n  };\n\n  public getOutputVolume = () => {\n    return this.calculateVolume(this.getOutputByteFrequencyData());\n  };\n\n  public sendFeedback = (like: boolean) => {\n    if (!this.canSendFeedback) {\n      console.warn(\n        this.lastFeedbackEventId === 0\n          ? \"Cannot send feedback: the conversation has not started yet.\"\n          : \"Cannot send feedback: feedback has already been sent for the current response.\"\n      );\n      return;\n    }\n\n    this.connection.sendMessage({\n      type: \"feedback\",\n      score: like ? \"like\" : \"dislike\",\n      event_id: this.currentEventId,\n    });\n    this.lastFeedbackEventId = this.currentEventId;\n    this.updateCanSendFeedback();\n  };\n}\n\nexport function postOverallFeedback(\n  conversationId: string,\n  like: boolean,\n  origin: string = HTTPS_API_ORIGIN\n) {\n  return fetch(`${origin}/v1/convai/conversations/${conversationId}/feedback`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      feedback: like ? \"like\" : \"dislike\",\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n}\n"],"names":["arrayBufferToBase64","b","buffer","Uint8Array","window","btoa","String","fromCharCode","base64ToArrayBuffer","base64","binaryString","atob","len","length","bytes","i","charCodeAt","blob","Blob","type","rawAudioProcessor","URL","createObjectURL","isIosDevice","includes","navigator","platform","userAgent","document","Input","create","sampleRate","format","preferHeadphonesForIosDevices","context","inputStream","options","ideal","echoCancellation","noiseSuppression","idealDevice","mediaDevices","enumerateDevices","find","d","kind","keyword","label","toLowerCase","deviceId","supportsSampleRateConstraint","getSupportedConstraints","AudioContext","analyser","createAnalyser","audioWorklet","addModule","getUserMedia","audio","source","createMediaStreamSource","worklet","AudioWorkletNode","port","postMessage","connect","resume","error","_inputStream","_context","getTracks","forEach","track","stop","close","constructor","this","setMuted","isMuted","audioConcatProcessor","Output","gain","createGain","destination","isValidSocketEvent","event","Connection","config","socket","_config$origin","origin","url","signedUrl","agentId","protocols","authorization","push","WebSocket","conversationConfig","Promise","resolve","reject","addEventListener","_socket","overridesEvent","_config$overrides$age","_config$overrides$age2","_config$overrides$age3","_config$overrides$tts","overrides","conversation_config_override","agent","prompt","first_message","firstMessage","language","tts","voice_id","voiceId","customLlmExtraBody","custom_llm_extra_body","dynamicVariables","dynamic_variables","send","JSON","stringify","once","setTimeout","message","parse","data","conversation_initiation_metadata_event","console","warn","conversation_id","agent_output_audio_format","user_input_audio_format","inputFormat","parseFormat","outputFormat","_socket2","conversationId","queue","disconnectionDetails","onDisconnectCallback","onMessageCallback","disconnect","reason","code","parsedEvent","_","sendMessage","onMessage","callback","onDisconnect","details","_this$onDisconnectCal","call","formatPart","sampleRatePart","split","Error","parseInt","isNaN","defaultClientTools","clientTools","defaultCallbacks","onConnect","onDebug","onError","onAudio","onModeChange","onStatusChange","onCanSendFeedbackChange","Conversation","startSession","fullOptions","_extends","status","canSendFeedback","input","connection","output","preliminaryInputStream","_options$connectionDe","_preliminaryInputStre","delayConfig","connectionDelay","default","android","delay","_delayConfig$android","test","_delayConfig$ios","ios","all","_preliminaryInputStre2","_connection","_input","_output","_this","lastInterruptTimestamp","mode","inputFrequencyData","outputFrequencyData","volume","currentEventId","lastFeedbackEventId","endSession","endSessionWithDetails","async","updateStatus","updateMode","updateCanSendFeedback","interruption_event","event_id","fadeOutAudio","agent_response_event","agent_response","user_transcription_event","user_transcript","response","tentative_agent_response_internal_event","tentative_agent_response","info","client_tool_call","hasOwnProperty","tool_name","_await$_this$options$","result","parameters","formattedResult","tool_call_id","is_error","e","clientToolName","onUnhandledClientToolCall","audio_event","audio_base_64","addAudioBase64Chunk","ping_event","onInputWorkletMessage","user_audio_chunk","onOutputWorkletMessage","finished","chunk","value","exponentialRampToValueAtTime","currentTime","calculateVolume","frequencyData","getId","isOpen","setVolume","setMicMuted","getInputByteFrequencyData","_this$inputFrequencyD","frequencyBinCount","getByteFrequencyData","getOutputByteFrequencyData","_this$outputFrequency","getInputVolume","getOutputVolume","sendFeedback","like","score","onmessage","postOverallFeedback","fetch","method","body","feedback","headers"],"mappings":"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"}