{
  "version": 3,
  "sources": ["../../@11labs/client/src/utils/audio.ts", "../../@11labs/client/src/utils/rawAudioProcessor.ts", "../../@11labs/client/src/utils/compatibility.ts", "../../@11labs/client/src/utils/input.ts", "../../@11labs/client/src/utils/audioConcatProcessor.ts", "../../@11labs/client/src/utils/output.ts", "../../@11labs/client/src/utils/events.ts", "../../@11labs/client/src/utils/connection.ts", "../../@11labs/client/src/index.ts", "../../@11labs/react/src/index.ts"],
  "sourcesContent": ["export function arrayBufferToBase64(b: ArrayBufferLike) {\n  const buffer = new Uint8Array(b);\n  // @ts-ignore\n  const base64Data = window.btoa(String.fromCharCode(...buffer));\n  return base64Data;\n}\n\nexport function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binaryString = window.atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n", "/*\n * ulaw encoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nconst blob = new Blob(\n  [\n    // language=JavaScript\n    `\n      const BIAS = 0x84;\n      const CLIP = 32635;\n      const encodeTable = [\n        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\n        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\n      ];\n      \n      function encodeSample(sample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let muLawSample;\n        sign = (sample >> 8) & 0x80;\n        if (sign !== 0) sample = -sample;\n        sample = sample + BIAS;\n        if (sample > CLIP) sample = CLIP;\n        exponent = encodeTable[(sample>>7) & 0xFF];\n        mantissa = (sample >> (exponent+3)) & 0x0F;\n        muLawSample = ~(sign | (exponent << 4) | mantissa);\n        \n        return muLawSample;\n      }\n    \n      class RawAudioProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n                    \n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case \"setFormat\":\n                this.isMuted = false;\n                this.buffer = []; // Initialize an empty buffer\n                this.bufferSize = data.sampleRate / 4;\n                this.format = data.format;\n\n                if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\n                  globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\n                    this.resampler = resampler;\n                  });\n                }\n                break;\n              case \"setMuted\":\n                this.isMuted = data.isMuted;\n                break;\n            }\n          };\n        }\n        process(inputs) {\n          if (!this.buffer) {\n            return true;\n          }\n          \n          const input = inputs[0]; // Get the first input node\n          if (input.length > 0) {\n            let channelData = input[0]; // Get the first channel's data\n\n            // Resample the audio if necessary\n            if (this.resampler) {\n              channelData = this.resampler.full(channelData);\n            }\n\n            // Add channel data to the buffer\n            this.buffer.push(...channelData);\n            // Get max volume \n            let sum = 0.0;\n            for (let i = 0; i < channelData.length; i++) {\n              sum += channelData[i] * channelData[i];\n            }\n            const maxVolume = Math.sqrt(sum / channelData.length);\n            // Check if buffer size has reached or exceeded the threshold\n            if (this.buffer.length >= this.bufferSize) {\n              const float32Array = this.isMuted \n                ? new Float32Array(this.buffer.length)\n                : new Float32Array(this.buffer);\n\n              let encodedArray = this.format === \"ulaw\"\n                ? new Uint8Array(float32Array.length)\n                : new Int16Array(float32Array.length);\n\n              // Iterate through the Float32Array and convert each sample to PCM16\n              for (let i = 0; i < float32Array.length; i++) {\n                // Clamp the value to the range [-1, 1]\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\n\n                // Scale the sample to the range [-32768, 32767]\n                let value = sample < 0 ? sample * 32768 : sample * 32767;\n                if (this.format === \"ulaw\") {\n                  value = encodeSample(Math.round(value));\n                }\n\n                encodedArray[i] = value;\n              }\n\n              // Send the buffered data to the main script\n              this.port.postMessage([encodedArray, maxVolume]);\n\n              // Clear the buffer after sending\n              this.buffer = [];\n            }\n          }\n          return true; // Continue processing\n        }\n      }\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\n  `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const rawAudioProcessor = URL.createObjectURL(blob);\n", "export function isIosDevice() {\n  return (\n    [\n      \"iPad Simulator\",\n      \"iPhone Simulator\",\n      \"iPod Simulator\",\n      \"iPad\",\n      \"iPhone\",\n      \"iPod\",\n    ].includes(navigator.platform) ||\n    // iPad on iOS 13 detection\n    (navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document)\n  );\n}\n\nexport function isAndroidDevice() {\n  return /android/i.test(navigator.userAgent);\n}\n", "import { rawAudioProcessor } from \"./rawAudioProcessor\";\nimport { FormatConfig } from \"./connection\";\nimport { isIosDevice } from \"./compatibility\";\n\nexport type InputConfig = {\n  preferHeadphonesForIosDevices?: boolean;\n};\n\nconst LIBSAMPLERATE_JS =\n  \"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\";\n\nexport class Input {\n  public static async create({\n    sampleRate,\n    format,\n    preferHeadphonesForIosDevices,\n  }: FormatConfig & InputConfig): Promise<Input> {\n    let context: AudioContext | null = null;\n    let inputStream: MediaStream | null = null;\n\n    try {\n      const options: MediaTrackConstraints = {\n        sampleRate: { ideal: sampleRate },\n        echoCancellation: { ideal: true },\n        noiseSuppression: { ideal: true },\n      };\n\n      if (isIosDevice() && preferHeadphonesForIosDevices) {\n        const availableDevices =\n          await window.navigator.mediaDevices.enumerateDevices();\n        const idealDevice = availableDevices.find(\n          d =>\n            // cautious to include \"bluetooth\" in the search\n            // as might trigger bluetooth speakers\n            d.kind === \"audioinput\" &&\n            [\"airpod\", \"headphone\", \"earphone\"].find(keyword =>\n              d.label.toLowerCase().includes(keyword)\n            )\n        );\n        if (idealDevice) {\n          options.deviceId = { ideal: idealDevice.deviceId };\n        }\n      }\n\n      const supportsSampleRateConstraint =\n        navigator.mediaDevices.getSupportedConstraints().sampleRate;\n\n      context = new window.AudioContext(\n        supportsSampleRateConstraint ? { sampleRate } : {}\n      );\n      const analyser = context.createAnalyser();\n      if (!supportsSampleRateConstraint) {\n        await context.audioWorklet.addModule(LIBSAMPLERATE_JS);\n      }\n      await context.audioWorklet.addModule(rawAudioProcessor);\n\n      inputStream = await navigator.mediaDevices.getUserMedia({\n        audio: options,\n      });\n\n      const source = context.createMediaStreamSource(inputStream);\n      const worklet = new AudioWorkletNode(context, \"raw-audio-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format, sampleRate });\n\n      source.connect(analyser);\n      analyser.connect(worklet);\n\n      await context.resume();\n\n      return new Input(context, analyser, worklet, inputStream);\n    } catch (error) {\n      inputStream?.getTracks().forEach(track => track.stop());\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly worklet: AudioWorkletNode,\n    public readonly inputStream: MediaStream\n  ) {}\n\n  public async close() {\n    this.inputStream.getTracks().forEach(track => track.stop());\n    await this.context.close();\n  }\n\n  public setMuted(isMuted: boolean) {\n    this.worklet.port.postMessage({ type: \"setMuted\", isMuted });\n  }\n}\n", "/*\n * ulaw decoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nconst blob = new Blob(\n  [\n    // language=JavaScript\n    `\n      const decodeTable = [0,132,396,924,1980,4092,8316,16764];\n      \n      export function decodeSample(muLawSample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let sample;\n        muLawSample = ~muLawSample;\n        sign = (muLawSample & 0x80);\n        exponent = (muLawSample >> 4) & 0x07;\n        mantissa = muLawSample & 0x0F;\n        sample = decodeTable[exponent] + (mantissa << (exponent+3));\n        if (sign !== 0) sample = -sample;\n\n        return sample;\n      }\n      \n      class AudioConcatProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffers = []; // Initialize an empty buffer\n          this.cursor = 0;\n          this.currentBuffer = null;\n          this.wasInterrupted = false;\n          this.finished = false;\n          \n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case \"setFormat\":\n                this.format = data.format;\n                break;\n              case \"buffer\":\n                this.wasInterrupted = false;\n                this.buffers.push(\n                  this.format === \"ulaw\"\n                    ? new Uint8Array(data.buffer)\n                    : new Int16Array(data.buffer)\n                );\n                break;\n              case \"interrupt\":\n                this.wasInterrupted = true;\n                break;\n              case \"clearInterrupted\":\n                if (this.wasInterrupted) {\n                  this.wasInterrupted = false;\n                  this.buffers = [];\n                  this.currentBuffer = null;\n                }\n            }\n          };\n        }\n        process(_, outputs) {\n          let finished = false;\n          const output = outputs[0][0];\n          for (let i = 0; i < output.length; i++) {\n            if (!this.currentBuffer) {\n              if (this.buffers.length === 0) {\n                finished = true;\n                break;\n              }\n              this.currentBuffer = this.buffers.shift();\n              this.cursor = 0;\n            }\n\n            let value = this.currentBuffer[this.cursor];\n            if (this.format === \"ulaw\") {\n              value = decodeSample(value);\n            }\n            output[i] = value / 32768;\n            this.cursor++;\n\n            if (this.cursor >= this.currentBuffer.length) {\n              this.currentBuffer = null;\n            }\n          }\n\n          if (this.finished !== finished) {\n            this.finished = finished;\n            this.port.postMessage({ type: \"process\", finished });\n          }\n\n          return true; // Continue processing\n        }\n      }\n\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\n    `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const audioConcatProcessor = URL.createObjectURL(blob);\n", "import { audioConcatProcessor } from \"./audioConcatProcessor\";\nimport { FormatConfig } from \"./connection\";\n\nexport class Output {\n  public static async create({\n    sampleRate,\n    format,\n  }: FormatConfig): Promise<Output> {\n    let context: AudioContext | null = null;\n    try {\n      context = new AudioContext({ sampleRate });\n      const analyser = context.createAnalyser();\n      const gain = context.createGain();\n      gain.connect(analyser);\n      analyser.connect(context.destination);\n      await context.audioWorklet.addModule(audioConcatProcessor);\n      const worklet = new AudioWorkletNode(context, \"audio-concat-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format });\n      worklet.connect(gain);\n\n      await context.resume();\n\n      return new Output(context, analyser, gain, worklet);\n    } catch (error) {\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly gain: GainNode,\n    public readonly worklet: AudioWorkletNode\n  ) {}\n\n  public async close() {\n    await this.context.close();\n  }\n}\n", "import { Language } from \"./connection\";\n\nexport type UserTranscriptionEvent = {\n  type: \"user_transcript\";\n  user_transcription_event: { user_transcript: string };\n};\nexport type AgentResponseEvent = {\n  type: \"agent_response\";\n  agent_response_event: { agent_response: string };\n};\nexport type AgentAudioEvent = {\n  type: \"audio\";\n  audio_event: {\n    audio_base_64: string;\n    event_id: number;\n  };\n};\nexport type InterruptionEvent = {\n  type: \"interruption\";\n  interruption_event: {\n    event_id: number;\n  };\n};\nexport type InternalTentativeAgentResponseEvent = {\n  type: \"internal_tentative_agent_response\";\n  tentative_agent_response_internal_event: {\n    tentative_agent_response: string;\n  };\n};\nexport type ConfigEvent = {\n  type: \"conversation_initiation_metadata\";\n  conversation_initiation_metadata_event: {\n    conversation_id: string;\n    agent_output_audio_format: string;\n    user_input_audio_format?: string;\n  };\n};\nexport type PingEvent = {\n  type: \"ping\";\n  ping_event: {\n    event_id: number;\n    ping_ms?: number;\n  };\n};\nexport type ClientToolCallEvent = {\n  type: \"client_tool_call\";\n  client_tool_call: {\n    tool_name: string;\n    tool_call_id: string;\n    parameters: any;\n    expects_response: boolean;\n  };\n};\n\n// TODO correction missing\nexport type IncomingSocketEvent =\n  | UserTranscriptionEvent\n  | AgentResponseEvent\n  | AgentAudioEvent\n  | InterruptionEvent\n  | InternalTentativeAgentResponseEvent\n  | ConfigEvent\n  | PingEvent\n  | ClientToolCallEvent;\n\nexport type PongEvent = {\n  type: \"pong\";\n  event_id: number;\n};\nexport type UserAudioEvent = {\n  user_audio_chunk: string;\n};\nexport type UserFeedbackEvent = {\n  type: \"feedback\";\n  score: \"like\" | \"dislike\";\n  event_id: number;\n};\nexport type ClientToolResultEvent = {\n  type: \"client_tool_result\";\n  tool_call_id: string;\n  result: any;\n  is_error: boolean;\n};\nexport type InitiationClientDataEvent = {\n  type: \"conversation_initiation_client_data\";\n  conversation_config_override?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      first_message?: string;\n      language?: Language;\n    };\n    tts?: {\n      voice_id?: string;\n    };\n  };\n  custom_llm_extra_body?: any;\n  dynamic_variables?: Record<string, string | number | boolean>;\n};\nexport type OutgoingSocketEvent =\n  | PongEvent\n  | UserAudioEvent\n  | InitiationClientDataEvent\n  | UserFeedbackEvent\n  | ClientToolResultEvent;\n\nexport function isValidSocketEvent(event: any): event is IncomingSocketEvent {\n  return !!event.type;\n}\n", "import {\n  InitiationClientDataEvent,\n  ConfigEvent,\n  isValidSocketEvent,\n  OutgoingSocketEvent,\n  IncomingSocketEvent,\n} from \"./events\";\n\nconst MAIN_PROTOCOL = \"convai\";\n\nexport type Language =\n  | \"en\"\n  | \"ja\"\n  | \"zh\"\n  | \"de\"\n  | \"hi\"\n  | \"fr\"\n  | \"ko\"\n  | \"pt\"\n  | \"it\"\n  | \"es\"\n  | \"id\"\n  | \"nl\"\n  | \"tr\"\n  | \"pl\"\n  | \"sv\"\n  | \"bg\"\n  | \"ro\"\n  | \"ar\"\n  | \"cs\"\n  | \"el\"\n  | \"fi\"\n  | \"ms\"\n  | \"da\"\n  | \"ta\"\n  | \"uk\"\n  | \"ru\"\n  | \"hu\"\n  | \"no\"\n  | \"vi\";\nexport type SessionConfig = {\n  origin?: string;\n  authorization?: string;\n  overrides?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      firstMessage?: string;\n      language?: Language;\n    };\n    tts?: {\n      voiceId?: string;\n    };\n  };\n  customLlmExtraBody?: any;\n  dynamicVariables?: Record<string, string | number | boolean>;\n  connectionDelay?: {\n    default: number;\n    android?: number;\n    ios?: number;\n  };\n} & (\n  | { signedUrl: string; agentId?: undefined }\n  | { agentId: string; signedUrl?: undefined }\n);\nexport type FormatConfig = {\n  format: \"pcm\" | \"ulaw\";\n  sampleRate: number;\n};\nexport type DisconnectionDetails =\n  | {\n      reason: \"error\";\n      message: string;\n      context: Event;\n    }\n  | {\n      reason: \"agent\";\n      context: CloseEvent;\n    }\n  | {\n      reason: \"user\";\n    };\nexport type OnDisconnectCallback = (details: DisconnectionDetails) => void;\nexport type OnMessageCallback = (event: IncomingSocketEvent) => void;\n\nconst WSS_API_ORIGIN = \"wss://api.elevenlabs.io\";\nconst WSS_API_PATHNAME = \"/v1/convai/conversation?agent_id=\";\n\nexport class Connection {\n  public static async create(config: SessionConfig): Promise<Connection> {\n    let socket: WebSocket | null = null;\n\n    try {\n      const origin = config.origin ?? WSS_API_ORIGIN;\n      const url = config.signedUrl\n        ? config.signedUrl\n        : origin + WSS_API_PATHNAME + config.agentId;\n\n      const protocols = [MAIN_PROTOCOL];\n      if (config.authorization) {\n        protocols.push(`bearer.${config.authorization}`);\n      }\n      socket = new WebSocket(url, protocols);\n      const conversationConfig = await new Promise<\n        ConfigEvent[\"conversation_initiation_metadata_event\"]\n      >((resolve, reject) => {\n        socket!.addEventListener(\n          \"open\",\n          () => {\n            const overridesEvent: InitiationClientDataEvent = {\n              type: \"conversation_initiation_client_data\",\n            };\n\n            if (config.overrides) {\n              overridesEvent.conversation_config_override = {\n                agent: {\n                  prompt: config.overrides.agent?.prompt,\n                  first_message: config.overrides.agent?.firstMessage,\n                  language: config.overrides.agent?.language,\n                },\n                tts: {\n                  voice_id: config.overrides.tts?.voiceId,\n                },\n              };\n            }\n\n            if (config.customLlmExtraBody) {\n              overridesEvent.custom_llm_extra_body = config.customLlmExtraBody;\n            }\n\n            if (config.dynamicVariables) {\n              overridesEvent.dynamic_variables = config.dynamicVariables;\n            }\n\n            socket?.send(JSON.stringify(overridesEvent));\n          },\n          { once: true }\n        );\n        socket!.addEventListener(\"error\", event => {\n          // In case the error event is followed by a close event, we want the\n          // latter to be the one that rejects the promise as it contains more\n          // useful information.\n          setTimeout(() => reject(event), 0);\n        });\n        socket!.addEventListener(\"close\", reject);\n        socket!.addEventListener(\n          \"message\",\n          (event: MessageEvent) => {\n            const message = JSON.parse(event.data);\n\n            if (!isValidSocketEvent(message)) {\n              return;\n            }\n\n            if (message.type === \"conversation_initiation_metadata\") {\n              resolve(message.conversation_initiation_metadata_event);\n            } else {\n              console.warn(\n                \"First received message is not conversation metadata.\"\n              );\n            }\n          },\n          { once: true }\n        );\n      });\n\n      const {\n        conversation_id,\n        agent_output_audio_format,\n        user_input_audio_format,\n      } = conversationConfig;\n\n      const inputFormat = parseFormat(user_input_audio_format ?? \"pcm_16000\");\n      const outputFormat = parseFormat(agent_output_audio_format);\n\n      return new Connection(socket, conversation_id, inputFormat, outputFormat);\n    } catch (error) {\n      socket?.close();\n      throw error;\n    }\n  }\n\n  private queue: IncomingSocketEvent[] = [];\n  private disconnectionDetails: DisconnectionDetails | null = null;\n  private onDisconnectCallback: OnDisconnectCallback | null = null;\n  private onMessageCallback: OnMessageCallback | null = null;\n\n  private constructor(\n    public readonly socket: WebSocket,\n    public readonly conversationId: string,\n    public readonly inputFormat: FormatConfig,\n    public readonly outputFormat: FormatConfig\n  ) {\n    this.socket.addEventListener(\"error\", event => {\n      // In case the error event is followed by a close event, we want the\n      // latter to be the one that disconnects the session as it contains more\n      // useful information.\n      setTimeout(\n        () =>\n          this.disconnect({\n            reason: \"error\",\n            message: \"The connection was closed due to a socket error.\",\n            context: event,\n          }),\n        0\n      );\n    });\n    this.socket.addEventListener(\"close\", event => {\n      this.disconnect(\n        event.code === 1000\n          ? {\n              reason: \"agent\",\n              context: event,\n            }\n          : {\n              reason: \"error\",\n              message:\n                event.reason || \"The connection was closed by the server.\",\n              context: event,\n            }\n      );\n    });\n    this.socket.addEventListener(\"message\", event => {\n      try {\n        const parsedEvent = JSON.parse(event.data);\n        if (!isValidSocketEvent(parsedEvent)) {\n          return;\n        }\n\n        if (this.onMessageCallback) {\n          this.onMessageCallback(parsedEvent);\n        } else {\n          this.queue.push(parsedEvent);\n        }\n      } catch (_) {}\n    });\n  }\n\n  public close() {\n    this.socket.close();\n  }\n\n  public sendMessage(message: OutgoingSocketEvent) {\n    this.socket.send(JSON.stringify(message));\n  }\n\n  public onMessage(callback: OnMessageCallback) {\n    this.onMessageCallback = callback;\n    this.queue.forEach(callback);\n    this.queue = [];\n  }\n\n  public onDisconnect(callback: OnDisconnectCallback) {\n    this.onDisconnectCallback = callback;\n    if (this.disconnectionDetails) {\n      callback(this.disconnectionDetails);\n    }\n  }\n\n  private disconnect(details: DisconnectionDetails) {\n    if (!this.disconnectionDetails) {\n      this.disconnectionDetails = details;\n      this.onDisconnectCallback?.(details);\n    }\n  }\n}\n\nfunction parseFormat(format: string): FormatConfig {\n  const [formatPart, sampleRatePart] = format.split(\"_\");\n  if (![\"pcm\", \"ulaw\"].includes(formatPart)) {\n    throw new Error(`Invalid format: ${format}`);\n  }\n\n  const sampleRate = parseInt(sampleRatePart);\n  if (isNaN(sampleRate)) {\n    throw new Error(`Invalid sample rate: ${sampleRatePart}`);\n  }\n\n  return {\n    format: formatPart as FormatConfig[\"format\"],\n    sampleRate,\n  };\n}\n", "import { arrayBufferToBase64, base64ToArrayBuffer } from \"./utils/audio\";\nimport { Input, InputConfig } from \"./utils/input\";\nimport { Output } from \"./utils/output\";\nimport {\n  Connection,\n  DisconnectionDetails,\n  OnDisconnectCallback,\n  SessionConfig,\n} from \"./utils/connection\";\nimport { ClientToolCallEvent, IncomingSocketEvent } from \"./utils/events\";\nimport { isAndroidDevice, isIosDevice } from \"./utils/compatibility\";\n\nexport type { InputConfig } from \"./utils/input\";\nexport type { IncomingSocketEvent } from \"./utils/events\";\nexport type { SessionConfig, DisconnectionDetails, Language } from \"./utils/connection\";\nexport type Role = \"user\" | \"ai\";\nexport type Mode = \"speaking\" | \"listening\";\nexport type Status =\n  | \"connecting\"\n  | \"connected\"\n  | \"disconnecting\"\n  | \"disconnected\";\nexport type Options = SessionConfig &\n  Callbacks &\n  ClientToolsConfig &\n  InputConfig;\nexport type ClientToolsConfig = {\n  clientTools: Record<\n    string,\n    (\n      parameters: any\n    ) => Promise<string | number | void> | string | number | void\n  >;\n};\nexport type Callbacks = {\n  onConnect: (props: { conversationId: string }) => void;\n  // internal debug events, not to be used\n  onDebug: (props: any) => void;\n  onDisconnect: OnDisconnectCallback;\n  onError: (message: string, context?: any) => void;\n  onMessage: (props: { message: string; source: Role }) => void;\n  onAudio: (base64Audio: string) => void;\n  onModeChange: (prop: { mode: Mode }) => void;\n  onStatusChange: (prop: { status: Status }) => void;\n  onCanSendFeedbackChange: (prop: { canSendFeedback: boolean }) => void;\n  onUnhandledClientToolCall?: (\n    params: ClientToolCallEvent[\"client_tool_call\"]\n  ) => void;\n};\n\nconst defaultClientTools = { clientTools: {} };\nconst defaultCallbacks: Callbacks = {\n  onConnect: () => {},\n  onDebug: () => {},\n  onDisconnect: () => {},\n  onError: () => {},\n  onMessage: () => {},\n  onAudio: () => {},\n  onModeChange: () => {},\n  onStatusChange: () => {},\n  onCanSendFeedbackChange: () => {},\n};\n\nconst HTTPS_API_ORIGIN = \"https://api.elevenlabs.io\";\n\nexport class Conversation {\n  public static async startSession(\n    options: SessionConfig &\n      Partial<Callbacks> &\n      Partial<ClientToolsConfig> &\n      Partial<InputConfig>\n  ): Promise<Conversation> {\n    const fullOptions: Options = {\n      ...defaultClientTools,\n      ...defaultCallbacks,\n      ...options,\n    };\n\n    fullOptions.onStatusChange({ status: \"connecting\" });\n    fullOptions.onCanSendFeedbackChange({ canSendFeedback: false });\n\n    let input: Input | null = null;\n    let connection: Connection | null = null;\n    let output: Output | null = null;\n    let preliminaryInputStream: MediaStream | null = null;\n\n    try {\n      // some browsers won't allow calling getSupportedConstraints or enumerateDevices\n      // before getting approval for microphone access\n      preliminaryInputStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n\n      const delayConfig = options.connectionDelay ?? {\n        default: 0,\n        // Give the Android AudioManager enough time to switch to the correct audio mode\n        android: 3_000,\n      };\n      let delay = delayConfig.default;\n      if (isAndroidDevice()) {\n        delay = delayConfig.android ?? delay;\n      } else if (isIosDevice()) {\n        delay = delayConfig.ios ?? delay;\n      }\n\n      if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n\n      connection = await Connection.create(options);\n      [input, output] = await Promise.all([\n        Input.create({\n          ...connection.inputFormat,\n          preferHeadphonesForIosDevices: options.preferHeadphonesForIosDevices,\n        }),\n        Output.create(connection.outputFormat),\n      ]);\n\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      preliminaryInputStream = null;\n\n      return new Conversation(fullOptions, connection, input, output);\n    } catch (error) {\n      fullOptions.onStatusChange({ status: \"disconnected\" });\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      connection?.close();\n      await input?.close();\n      await output?.close();\n      throw error;\n    }\n  }\n\n  private lastInterruptTimestamp: number = 0;\n  private mode: Mode = \"listening\";\n  private status: Status = \"connecting\";\n  private inputFrequencyData?: Uint8Array;\n  private outputFrequencyData?: Uint8Array;\n  private volume: number = 1;\n  private currentEventId: number = 1;\n  private lastFeedbackEventId: number = 1;\n  private canSendFeedback: boolean = false;\n\n  private constructor(\n    private readonly options: Options,\n    private readonly connection: Connection,\n    public readonly input: Input,\n    public readonly output: Output\n  ) {\n    this.options.onConnect({ conversationId: connection.conversationId });\n\n    this.connection.onDisconnect(this.endSessionWithDetails);\n    this.connection.onMessage(this.onMessage);\n\n    this.input.worklet.port.onmessage = this.onInputWorkletMessage;\n    this.output.worklet.port.onmessage = this.onOutputWorkletMessage;\n    this.updateStatus(\"connected\");\n  }\n\n  public endSession = () => this.endSessionWithDetails({ reason: \"user\" });\n\n  private endSessionWithDetails = async (details: DisconnectionDetails) => {\n    if (this.status !== \"connected\" && this.status !== \"connecting\") return;\n    this.updateStatus(\"disconnecting\");\n\n    this.connection.close();\n    await this.input.close();\n    await this.output.close();\n\n    this.updateStatus(\"disconnected\");\n    this.options.onDisconnect(details);\n  };\n\n  private updateMode = (mode: Mode) => {\n    if (mode !== this.mode) {\n      this.mode = mode;\n      this.options.onModeChange({ mode });\n    }\n  };\n\n  private updateStatus = (status: Status) => {\n    if (status !== this.status) {\n      this.status = status;\n      this.options.onStatusChange({ status });\n    }\n  };\n\n  private updateCanSendFeedback = () => {\n    const canSendFeedback = this.currentEventId !== this.lastFeedbackEventId;\n    if (this.canSendFeedback !== canSendFeedback) {\n      this.canSendFeedback = canSendFeedback;\n      this.options.onCanSendFeedbackChange({ canSendFeedback });\n    }\n  };\n\n  private onMessage = async (parsedEvent: IncomingSocketEvent) => {\n    switch (parsedEvent.type) {\n      case \"interruption\": {\n        if (parsedEvent.interruption_event) {\n          this.lastInterruptTimestamp = parsedEvent.interruption_event.event_id;\n        }\n        this.fadeOutAudio();\n        return;\n      }\n\n      case \"agent_response\": {\n        this.options.onMessage({\n          source: \"ai\",\n          message: parsedEvent.agent_response_event.agent_response,\n        });\n        return;\n      }\n\n      case \"user_transcript\": {\n        this.options.onMessage({\n          source: \"user\",\n          message: parsedEvent.user_transcription_event.user_transcript,\n        });\n        return;\n      }\n\n      case \"internal_tentative_agent_response\": {\n        this.options.onDebug({\n          type: \"tentative_agent_response\",\n          response:\n            parsedEvent.tentative_agent_response_internal_event\n              .tentative_agent_response,\n        });\n        return;\n      }\n\n      case \"client_tool_call\": {\n        console.info(\"Received client tool call request\", parsedEvent.client_tool_call);\n        if (\n          this.options.clientTools.hasOwnProperty(\n            parsedEvent.client_tool_call.tool_name\n          )\n        ) {\n          try {\n            const result =\n              (await this.options.clientTools[\n                parsedEvent.client_tool_call.tool_name\n              ](parsedEvent.client_tool_call.parameters)) ??\n              \"Client tool execution successful.\"; // default client-tool call response\n\n            // The API expects result to be a string, so we need to convert it if it's not already a string\n            const formattedResult = typeof result === 'object' ? JSON.stringify(result) : String(result);\n\n            this.connection.sendMessage({\n              type: \"client_tool_result\",\n              tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n              result: formattedResult,\n              is_error: false,\n            });\n          } catch (e) {\n            this.onError(\n              \"Client tool execution failed with following error: \" +\n                (e as Error)?.message,\n              {\n                clientToolName: parsedEvent.client_tool_call.tool_name,\n              }\n            );\n            this.connection.sendMessage({\n              type: \"client_tool_result\",\n              tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n              result: \"Client tool execution failed: \" + (e as Error)?.message,\n              is_error: true,\n            });\n          }\n        } else {\n          if (this.options.onUnhandledClientToolCall) {\n            this.options.onUnhandledClientToolCall(parsedEvent.client_tool_call);\n  \n            return;\n          }\n  \n          this.onError(\n            `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            {\n              clientToolName: parsedEvent.client_tool_call.tool_name,\n            }\n          );\n          this.connection.sendMessage({\n            type: \"client_tool_result\",\n            tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n            result: `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            is_error: true,\n          });\n        }\n\n        return;\n      }\n\n      case \"audio\": {\n\n        if (this.lastInterruptTimestamp <= parsedEvent.audio_event.event_id) {\n          this.options.onAudio(parsedEvent.audio_event.audio_base_64)\n          this.addAudioBase64Chunk(parsedEvent.audio_event.audio_base_64);\n          this.currentEventId = parsedEvent.audio_event.event_id;\n          this.updateCanSendFeedback();\n          this.updateMode(\"speaking\");\n        }\n        return;\n      }\n\n      case \"ping\": {\n        this.connection.sendMessage({\n          type: \"pong\",\n          event_id: parsedEvent.ping_event.event_id,\n        });\n        // parsedEvent.ping_event.ping_ms can be used on client side, for example\n        // to warn if ping is too high that experience might be degraded.\n        return;\n      }\n\n      // unhandled events are expected to be internal events\n      default: {\n        this.options.onDebug(parsedEvent);\n        return;\n      }\n    }\n  };\n\n  private onInputWorkletMessage = (event: MessageEvent): void => {\n    const rawAudioPcmData = event.data[0];\n    const maxVolume = event.data[1];\n\n    // check if the sound was loud enough, so we don't send unnecessary chunks\n    // then forward audio to websocket\n    //if (maxVolume > 0.001) {\n    if (this.status === \"connected\") {\n      this.connection.sendMessage({\n        user_audio_chunk: arrayBufferToBase64(rawAudioPcmData.buffer),\n        //sample_rate: this.inputAudioContext?.inputSampleRate || this.inputSampleRate,\n      });\n    }\n    //}\n  };\n\n  private onOutputWorkletMessage = ({ data }: MessageEvent): void => {\n    if (data.type === \"process\") {\n      this.updateMode(data.finished ? \"listening\" : \"speaking\");\n    }\n  };\n\n  private addAudioBase64Chunk = (chunk: string) => {\n    this.output.gain.gain.value = this.volume;\n    this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    this.output.worklet.port.postMessage({\n      type: \"buffer\",\n      buffer: base64ToArrayBuffer(chunk),\n    });\n  };\n\n  private fadeOutAudio = () => {\n    // mute agent\n    this.updateMode(\"listening\");\n    this.output.worklet.port.postMessage({ type: \"interrupt\" });\n    this.output.gain.gain.exponentialRampToValueAtTime(\n      0.0001,\n      this.output.context.currentTime + 2\n    );\n\n    // reset volume back\n    setTimeout(() => {\n      this.output.gain.gain.value = this.volume;\n      this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    }, 2000); // Adjust the duration as needed\n  };\n\n  private onError = (message: string, context?: any) => {\n    console.error(message, context);\n    this.options.onError(message, context);\n  };\n\n  private calculateVolume = (frequencyData: Uint8Array) => {\n    if (frequencyData.length === 0) {\n      return 0;\n    }\n\n    // TODO: Currently this averages all frequencies, but we should probably\n    // bias towards the frequencies that are more typical for human voice\n    let volume = 0;\n    for (let i = 0; i < frequencyData.length; i++) {\n      volume += frequencyData[i] / 255;\n    }\n    volume /= frequencyData.length;\n\n    return volume < 0 ? 0 : volume > 1 ? 1 : volume;\n  };\n\n  public getId = () => this.connection.conversationId;\n\n  public isOpen = () => this.status === \"connected\";\n\n  public setVolume = ({ volume }: { volume: number }) => {\n    this.volume = volume;\n  };\n\n  public setMicMuted = (isMuted: boolean) => {\n    this.input.setMuted(isMuted);\n  }\n\n  public getInputByteFrequencyData = () => {\n    this.inputFrequencyData ??= new Uint8Array(\n      this.input.analyser.frequencyBinCount\n    );\n    this.input.analyser.getByteFrequencyData(this.inputFrequencyData);\n    return this.inputFrequencyData;\n  };\n\n  public getOutputByteFrequencyData = () => {\n    this.outputFrequencyData ??= new Uint8Array(\n      this.output.analyser.frequencyBinCount\n    );\n    this.output.analyser.getByteFrequencyData(this.outputFrequencyData);\n    return this.outputFrequencyData;\n  };\n\n  public getInputVolume = () => {\n    return this.calculateVolume(this.getInputByteFrequencyData());\n  };\n\n  public getOutputVolume = () => {\n    return this.calculateVolume(this.getOutputByteFrequencyData());\n  };\n\n  public sendFeedback = (like: boolean) => {\n    if (!this.canSendFeedback) {\n      console.warn(\n        this.lastFeedbackEventId === 0\n          ? \"Cannot send feedback: the conversation has not started yet.\"\n          : \"Cannot send feedback: feedback has already been sent for the current response.\"\n      );\n      return;\n    }\n\n    this.connection.sendMessage({\n      type: \"feedback\",\n      score: like ? \"like\" : \"dislike\",\n      event_id: this.currentEventId,\n    });\n    this.lastFeedbackEventId = this.currentEventId;\n    this.updateCanSendFeedback();\n  };\n}\n\nexport function postOverallFeedback(\n  conversationId: string,\n  like: boolean,\n  origin: string = HTTPS_API_ORIGIN\n) {\n  return fetch(`${origin}/v1/convai/conversations/${conversationId}/feedback`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      feedback: like ? \"like\" : \"dislike\",\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n}\n", "import { useEffect, useRef, useState } from \"react\";\nimport {\n  Conversation,\n  Mode,\n  SessionConfig,\n  Callbacks,\n  Options,\n  Status,\n  ClientToolsConfig,\n  InputConfig,\n} from \"@11labs/client\";\n\nexport type {\n  Role,\n  Mode,\n  Status,\n  SessionConfig,\n  DisconnectionDetails,\n  Language,\n} from \"@11labs/client\";\nexport { postOverallFeedback } from \"@11labs/client\";\n\nexport type HookOptions = Partial<\n  SessionConfig & HookCallbacks & ClientToolsConfig & InputConfig\n>;\nexport type ControlledState = {\n  micMuted?: boolean;\n  volume?: number;\n}\nexport type HookCallbacks = Pick<\n  Callbacks,\n  | \"onConnect\"\n  | \"onDisconnect\"\n  | \"onError\"\n  | \"onMessage\"\n  | \"onAudio\"\n  | \"onDebug\"\n  | \"onUnhandledClientToolCall\"\n>;\n\nexport function useConversation<T extends HookOptions & ControlledState>(props: T = {} as T) {\n  const {micMuted, volume, ...defaultOptions} = props;\n  const conversationRef = useRef<Conversation | null>(null);\n  const lockRef = useRef<Promise<Conversation> | null>(null);\n  const [status, setStatus] = useState<Status>(\"disconnected\");\n  const [canSendFeedback, setCanSendFeedback] = useState(false);\n  const [mode, setMode] = useState<Mode>(\"listening\");\n\n  useEffect(() => {\n    if (micMuted !== undefined) {\n      conversationRef?.current?.setMicMuted(micMuted);\n    }\n  }, [micMuted]);\n\n  useEffect(() => {\n    if (volume !== undefined) {\n      conversationRef?.current?.setVolume({ volume });\n    }\n  }, [volume]);\n\n  useEffect(() => {\n    return () => {\n      conversationRef.current?.endSession();\n    };\n  }, []);\n\n  return {\n    startSession: (async (options?: HookOptions) => {\n      if (conversationRef.current?.isOpen()) {\n        return conversationRef.current.getId();\n      }\n\n      if (lockRef.current) {\n        const conversation = await lockRef.current;\n        return conversation.getId();\n      }\n\n      try {\n        lockRef.current = Conversation.startSession({\n          ...(defaultOptions ?? {}),\n          ...(options ?? {}),\n          onModeChange: ({ mode }) => {\n            setMode(mode);\n          },\n          onStatusChange: ({ status }) => {\n            setStatus(status);\n          },\n          onCanSendFeedbackChange: ({ canSendFeedback }) => {\n            setCanSendFeedback(canSendFeedback);\n          },\n        } as Options);\n\n        conversationRef.current = await lockRef.current;\n        // Persist controlled state between sessions\n        if (micMuted !== undefined) {\n          conversationRef.current.setMicMuted(micMuted);\n        }\n        if (volume !== undefined) {\n          conversationRef.current.setVolume({ volume });\n        }\n\n        return conversationRef.current.getId();\n      } finally {\n        lockRef.current = null;\n      }\n    }) as T extends SessionConfig\n      ? (options?: HookOptions) => Promise<string>\n      : (options: SessionConfig & HookOptions) => Promise<string>,\n    endSession: async () => {\n      const conversation = conversationRef.current;\n      conversationRef.current = null;\n      await conversation?.endSession();\n    },\n    setVolume: ({ volume }: { volume: number }) => {\n      conversationRef.current?.setVolume({ volume });\n    },\n    getInputByteFrequencyData: () => {\n      return conversationRef.current?.getInputByteFrequencyData();\n    },\n    getOutputByteFrequencyData: () => {\n      return conversationRef.current?.getOutputByteFrequencyData();\n    },\n    getInputVolume: () => {\n      return conversationRef.current?.getInputVolume() ?? 0;\n    },\n    getOutputVolume: () => {\n      return conversationRef.current?.getOutputVolume() ?? 0;\n    },\n    sendFeedback: (like: boolean) => {\n      conversationRef.current?.sendFeedback(like);\n    },\n    getId: () => {\n      return conversationRef.current?.getId();\n    },\n    status,\n    canSendFeedback,\n    micMuted,\n    isSpeaking: mode === \"speaking\",\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAM,SAAUA,EAAoBC,IAAAA;AAClC,QAAMC,KAAS,IAAIC,WAAWF,EAAAA;AAG9B,SADmBG,OAAOC,KAAKC,OAAOC,aAAAA,GAAgBL,EAAAA,CAAAA;AAExD;AAAA,SAEgBM,EAAoBC,IAAAA;AAClC,QAAMC,KAAeN,OAAOO,KAAKF,EAAAA,GAC3BG,KAAMF,GAAaG,QACnBC,KAAQ,IAAIX,WAAWS,EAAAA;AAC7B,WAASG,KAAI,GAAGA,KAAIH,IAAKG,KACvBD,CAAAA,GAAMC,EAAAA,IAAKL,GAAaM,WAAWD,EAAAA;AAErC,SAAOD,GAAMZ;AACf;ACVA,IAAMe,IAAO,IAAIC,KACf,CAEE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA,GAyHF,EAAEC,MAAM,yBAAA,CAAA;AA5HV,IA+HaC,IAAoBC,IAAIC,gBAAgBL,CAAAA;AAAAA,SCpIrCM,IAAAA;AACd,SACE,CACE,kBACA,oBACA,kBACA,QACA,UACA,MAAA,EACAC,SAASC,UAAUC,QAAAA,KAEpBD,UAAUE,UAAUH,SAAS,KAAA,KAAU,gBAAgBI;AAE5D;AAAA,ICFaC,IDEb,MCFaA,GAAAA;EACJ,aAAA,OAAaC,EAAOC,YACzBA,IAAUC,QACVA,IAAMC,+BACNA,GAAAA,GAAAA;AAEA,QAAIC,KAA+B,MAC/BC,KAAkC;AAEtC,QAAA;AACE,YAAMC,KAAiC,EACrCL,YAAY,EAAEM,OAAON,GAAAA,GACrBO,kBAAkB,EAAED,OAAAA,KAAO,GAC3BE,kBAAkB,EAAEF,OAAAA,KAAO,EAAA;AAG7B,UAAId,EAAAA,KAAiBU,IAA+B;AAClD,cAEMO,MAAAA,MADEpC,OAAOqB,UAAUgB,aAAaC,iBAAAA,GACDC,KACnCC,CAAAA,OAGa,iBAAXA,GAAEC,QACF,CAAC,UAAU,aAAa,UAAA,EAAYF,KAAKG,CAAAA,OACvCF,GAAEG,MAAMC,YAAAA,EAAcxB,SAASsB,EAAAA,CAAAA,CAAAA;AAGjCN,QAAAA,OACFJ,GAAQa,WAAW,EAAEZ,OAAOG,GAAYS,SAAAA;MAE5C;AAEA,YAAMC,KACJzB,UAAUgB,aAAaU,wBAAAA,EAA0BpB;AAEnDG,MAAAA,KAAU,IAAI9B,OAAOgD,aACnBF,KAA+B,EAAEnB,YAAAA,GAAAA,IAAe,CAAA,CAAA;AAElD,YAAMsB,KAAWnB,GAAQoB,eAAAA;AACpBJ,MAAAA,MAAAA,MACGhB,GAAQqB,aAAaC,UA3CjC,mGAAA,GAAA,MA6CUtB,GAAQqB,aAAaC,UAAUpC,CAAAA,GAErCe,KAAAA,MAAoBV,UAAUgB,aAAagB,aAAa,EACtDC,OAAOtB,GAAAA,CAAAA;AAGT,YAAMuB,KAASzB,GAAQ0B,wBAAwBzB,EAAAA,GACzC0B,KAAU,IAAIC,iBAAiB5B,IAAS,qBAAA;AAQ9C,aAPA2B,GAAQE,KAAKC,YAAY,EAAE7C,MAAM,aAAaa,QAAAA,IAAQD,YAAAA,GAAAA,CAAAA,GAEtD4B,GAAOM,QAAQZ,EAAAA,GACfA,GAASY,QAAQJ,EAAAA,GAAAA,MAEX3B,GAAQgC,OAAAA,GAEP,IAAIrC,GAAMK,IAASmB,IAAUQ,IAAS1B,EAAAA;IAC/C,SAASgC,IAAAA;AAAOC,UAAAA,IAAAC;AAGd,YAFW,SAAXD,KAAAjC,OAAAiC,GAAaE,UAAAA,EAAYC,QAAQC,CAAAA,OAASA,GAAMC,KAAAA,CAAAA,GACzC,SAAPJ,KAAAnC,OAAAmC,GAASK,MAAAA,GACHP;IACR;EACF;EAEAQ,YACkBzC,IACAmB,IACAQ,IACA1B,IAAAA;AAAwByC,SAHxB1C,UAAAA,QACAmB,KAAAA,WAAAA,QACAQ,KAAAA,UAAAA,QACA1B,KAAAA,cAAAA,QAHAyC,KAAO1C,UAAPA,IACA0C,KAAQvB,WAARA,IACAuB,KAAOf,UAAPA,IACAe,KAAWzC,cAAXA;EACf;EAEI,MAAA,QAAMuC;AACXE,SAAKzC,YAAYmC,UAAAA,EAAYC,QAAQC,CAAAA,OAASA,GAAMC,KAAAA,CAAAA,GAAAA,MAC9CG,KAAK1C,QAAQwC,MAAAA;EACrB;EAEOG,SAASC,IAAAA;AACdF,SAAKf,QAAQE,KAAKC,YAAY,EAAE7C,MAAM,YAAY2D,SAAAA,GAAAA,CAAAA;EACpD;AAAA;ACtFF,IAAM7D,IAAO,IAAIC,KACf,CAEE,owFAAA,GAyFF,EAAEC,MAAM,yBAAA,CAAA;AA5FV,IA+Fa4D,IAAuB1D,IAAIC,gBAAgBL,CAAAA;AAAAA,ICjG3C+D,IDiG2C/D,MCjG3C+D,GAAAA;EACJ,aAAA,OAAalD,EAAOC,YACzBA,IAAUC,QACVA,GAAAA,GAAAA;AAEA,QAAIE,KAA+B;AACnC,QAAA;AACEA,MAAAA,KAAU,IAAIkB,aAAa,EAAErB,YAAAA,GAAAA,CAAAA;AAC7B,YAAMsB,KAAWnB,GAAQoB,eAAAA,GACnB2B,KAAO/C,GAAQgD,WAAAA;AACrBD,MAAAA,GAAKhB,QAAQZ,EAAAA,GACbA,GAASY,QAAQ/B,GAAQiD,WAAAA,GAAAA,MACnBjD,GAAQqB,aAAaC,UAAUuB,CAAAA;AACrC,YAAMlB,KAAU,IAAIC,iBAAiB5B,IAAS,wBAAA;AAM9C,aALA2B,GAAQE,KAAKC,YAAY,EAAE7C,MAAM,aAAaa,QAAAA,GAAAA,CAAAA,GAC9C6B,GAAQI,QAAQgB,EAAAA,GAAAA,MAEV/C,GAAQgC,OAAAA,GAEH,IAAAc,GAAO9C,IAASmB,IAAU4B,IAAMpB,EAAAA;IAC7C,SAASM,IAAAA;AAAAA,UAAOE;AAEd,YAAA,SADAA,KAAAnC,OAAAmC,GAASK,MAAAA,GACHP;IACR;EACF;EAEAQ,YACkBzC,IACAmB,IACA4B,IACApB,IAAAA;AAHA3B,SAAAA,UAAAA,QACAmB,KAAAA,WAAAA,QACA4B,KAAAA,OAAAA,QAAAA,KACApB,UAAAA,QAHAe,KAAO1C,UAAPA,IACA0C,KAAQvB,WAARA,IACAuB,KAAIK,OAAJA,IACAL,KAAOf,UAAPA;EACf;EAEI,MAAA,QAAMa;AAAAA,UACLE,KAAK1C,QAAQwC,MAAAA;EACrB;AAAA;ACqEc,SAAAU,EAAmBC,IAAAA;AACjC,SAAA,CAAA,CAASA,GAAMlE;AACjB;ACpBa,IAAAmE,IAAA,MAAAA,GAAAA;EACJ,aAAA,OAAoBC,IAAAA;AACzB,QAAIC,KAA2B;AAE/B,QAAA;AAAIC,UAAAA;AACF,YAAMC,KAAsBD,SAAhBA,KAAGF,GAAOG,UAAMD,KARX,2BASXE,KAAMJ,GAAOK,YACfL,GAAOK,YACPF,KAVe,sCAUaH,GAAOM,SAEjCC,KAAY,CA3FF,QAAA;AA4FZP,MAAAA,GAAOQ,iBACTD,GAAUE,KAAK,UAAUT,GAAOQ,aAAAA,EAAAA,GAElCP,KAAS,IAAIS,UAAUN,IAAKG,EAAAA;AAC5B,YAAMI,KAAAA,MAAAA,IAA+BC,QAEnC,CAACC,IAASC,OAAAA;AACVb,QAAAA,GAAQc,iBACN,QACA,MAAA;AAAA,cAAKC;AACH,gBAAMC,KAA4C,EAChDrF,MAAM,sCAAA;AAGcsF,cAAAA,IAAAC,IAAAC,IAAAC;AAAlBrB,UAAAA,GAAOsB,cACTL,GAAeM,+BAA+B,EAC5CC,OAAO,EACLC,QAAAA,SAAMP,KAAElB,GAAOsB,UAAUE,SAAAA,SAAjBN,GAAwBO,QAChCC,eAAAA,SAAaP,KAAEnB,GAAOsB,UAAUE,SAAAA,SAAjBL,GAAwBQ,cACvCC,UAAAA,SAAQR,KAAEpB,GAAOsB,UAAUE,SAAAA,SAAjBJ,GAAwBQ,SAAAA,GAEpCC,KAAK,EACHC,UAAUT,SAAFA,KAAErB,GAAOsB,UAAUO,OAAAA,SAAjBR,GAAsBU,QAAAA,EAAAA,IAKlC/B,GAAOgC,uBACTf,GAAegB,wBAAwBjC,GAAOgC,qBAG5ChC,GAAOkC,qBACTjB,GAAekB,oBAAoBnC,GAAOkC,mBAG5ClB,SAAAA,KAAAf,OAAAe,GAAQoB,KAAKC,KAAKC,UAAUrB,EAAAA,CAAAA;QAC9B,GACA,EAAEsB,MAAAA,KAAM,CAAA,GAEVtC,GAAQc,iBAAiB,SAASjB,CAAAA,OAAAA;AAIhC0C,qBAAW,MAAM1B,GAAOhB,EAAAA,GAAQ,CAAA;QAClC,CAAA,GACAG,GAAQc,iBAAiB,SAASD,EAAAA,GAClCb,GAAQc,iBACN,WACCjB,CAAAA,OAAAA;AACC,gBAAM2C,KAAUJ,KAAKK,MAAM5C,GAAM6C,IAAAA;AAE5B9C,YAAmB4C,EAAAA,MAIH,uCAAjBA,GAAQ7G,OACViF,GAAQ4B,GAAQG,sCAAAA,IAEhBC,QAAQC,KACN,sDAAA;QAEJ,GAEF,EAAEP,MAAAA,KAAM,CAAA;MAAM,CAAA,GAAA,EAIZQ,iBACJA,IAAeC,2BACfA,IAAyBC,yBACzBA,GAAAA,IACEtC,IAEEuC,KAAcC,EAAmC,QAAvBF,KAAAA,KAA2B,WAAA,GACrDG,KAAeD,EAAYH,EAAAA;AAEjC,aAAO,IAAIjD,GAAWE,IAAQ8C,IAAiBG,IAAaE,EAAAA;IAC9D,SAASxE,IAAAA;AAAOyE,UAAAA;AAEd,YADM,SAANA,KAAApD,OAAAoD,GAAQlE,MAAAA,GACFP;IACR;EACF;EAOAQ,YACkBa,IACAqD,IACAJ,IACAE,IAAAA;AAAAA,SAHAnD,SAAAA,QAAAZ,KACAiE,iBAAAA,QACAJ,KAAAA,cAAAA,QACAE,KAAAA,eAAAA,QATVG,KAAAA,QAA+B,CAAA,GAAElE,KACjCmE,uBAAoD,MAAInE,KACxDoE,uBAAoD,MACpDC,KAAAA,oBAA8C,MAGpCrE,KAAMY,SAANA,IACAZ,KAAciE,iBAAdA,IACAjE,KAAW6D,cAAXA,IACA7D,KAAY+D,eAAZA,IAEhB/D,KAAKY,OAAOc,iBAAiB,SAASjB,CAAAA,OAAAA;AAIpC0C,iBACE,MACEnD,KAAKsE,WAAW,EACdC,QAAQ,SACRnB,SAAS,oDACT9F,SAASmD,GAAAA,CAAAA,GAEb,CAAA;IAEJ,CAAA,GACAT,KAAKY,OAAOc,iBAAiB,SAASjB,CAAAA,OAAAA;AACpCT,WAAKsE,WACY,QAAf7D,GAAM+D,OACF,EACED,QAAQ,SACRjH,SAASmD,GAAAA,IAEX,EACE8D,QAAQ,SACRnB,SACE3C,GAAM8D,UAAU,4CAClBjH,SAASmD,GAAAA,CAAAA;IAAAA,CAAAA,GAInBT,KAAKY,OAAOc,iBAAiB,WAAWjB,CAAAA,OAAAA;AACtC,UAAA;AACE,cAAMgE,KAAczB,KAAKK,MAAM5C,GAAM6C,IAAAA;AACrC,YAAA,CAAK9C,EAAmBiE,EAAAA,EACtB;AAGEzE,aAAKqE,oBACPrE,KAAKqE,kBAAkBI,EAAAA,IAEvBzE,KAAKkE,MAAM9C,KAAKqD,EAAAA;MAEpB,SAASC,IAAAA;MAAG;IAAA,CAAA;EAEhB;EAEO5E,QAAAA;AACLE,SAAKY,OAAOd,MAAAA;EACd;EAEO6E,YAAYvB,IAAAA;AACjBpD,SAAKY,OAAOmC,KAAKC,KAAKC,UAAUG,EAAAA,CAAAA;EAClC;EAEOwB,UAAUC,IAAAA;AACf7E,SAAKqE,oBAAoBQ,IACzB7E,KAAKkE,MAAMvE,QAAQkF,EAAAA,GACnB7E,KAAKkE,QAAQ,CAAA;EACf;EAEOY,aAAaD,IAAAA;AAClB7E,SAAKoE,uBAAuBS,IACxB7E,KAAKmE,wBACPU,GAAS7E,KAAKmE,oBAAAA;EAElB;EAEQG,WAAWS,IAAAA;AACeC,QAAAA;AAA3BhF,SAAKmE,yBACRnE,KAAKmE,uBAAuBY,IAC5BC,SAAAA,KAAAhF,KAAKoE,yBAALY,GAAAC,KAAAjF,MAA4B+E,EAAAA;EAEhC;AAAA;AAGF,SAASjB,EAAY1G,IAAAA;AACnB,QAAA,CAAO8H,IAAYC,EAAAA,IAAkB/H,GAAOgI,MAAM,GAAA;AAClD,MAAA,CAAK,CAAC,OAAO,MAAA,EAAQxI,SAASsI,EAAAA,EAC5B,OAAU,IAAAG,MAAM,mBAAmBjI,EAAAA,EAAAA;AAGrC,QAAMD,KAAamI,SAASH,EAAAA;AAC5B,MAAII,MAAMpI,EAAAA,EACR,OAAU,IAAAkI,MAAM,wBAAwBF,EAAAA,EAAAA;AAG1C,SAAO,EACL/H,QAAQ8H,IACR/H,YAAAA,GAAAA;AAEJ;ACzOA,IAAMqI,IAAqB,EAAEC,aAAa,CAAA,EAAA;AAA1C,IACMC,IAA8B,EAClCC,WAAWA,MAAAA;AAAAA,GACXC,SAASA,MAAAA;AAAAA,GACTd,cAAcA,MAAAA;AAAAA,GACde,SAASA,MAAAA;AAAAA,GACTjB,WAAWA,MAAAA;AAAAA,GACXkB,SAASA,MAAAA;AAAAA,GACTC,cAAcA,MAAAA;AAAAA,GACdC,gBAAgBA,MAAAA;AAAAA,GAChBC,yBAAyBA,MAAAA;AAAAA,EAAAA;AAAAA,IAKdC,IALcD,MAKdC,GAAAA;EACJ,aAAA,aACL1I,IAAAA;AAKA,UAAM2I,KAAWC,EACZZ,CAAAA,GAAAA,GACAE,GACAlI,EAAAA;AAGL2I,IAAAA,GAAYH,eAAe,EAAEK,QAAQ,aAAA,CAAA,GACrCF,GAAYF,wBAAwB,EAAEK,iBAAAA,MAAiB,CAAA;AAEvD,QAAIC,KAAsB,MACtBC,KAAgC,MAChCC,KAAwB,MACxBC,KAA6C;AAEjD,QAAA;AAAIC,UAAAA,IAAAC;AAGFF,MAAAA,KAAAA,MAA+B7J,UAAUgB,aAAagB,aAAa,EACjEC,OAAAA,KAAO,CAAA;AAGT,YAAM+H,KAAqCF,SAA1BA,KAAGnJ,GAAQsJ,mBAAeH,KAAI,EAC7CI,SAAS,GAETC,SAAS,IAAA;AAEX,UAAIC,KAAQJ,GAAYE;AAAAA,UACDG;AAAvB,UNnFG,WAAWC,KAAKtK,UAAUE,SAAAA,EMoF3BkK,CAAAA,KAA2B,SAAtBC,KAAGL,GAAYG,WAAOE,KAAID;eACtBtK,EAAAA,GAAe;AAAA,YAAAyK;AACxBH,QAAAA,KAAuBG,SAAlBA,IAAGP,GAAYQ,OAAGD,IAAIH;MAC7B;AAkBA,aAhBIA,KAAQ,KAAA,MACA,IAAA1F,QAAQC,CAAAA,OAAW2B,WAAW3B,IAASyF,EAAAA,CAAAA,GAGnDT,KAAAA,MAAmB9F,EAAWxD,OAAOM,EAAAA,GAAAA,CACpC+I,IAAOE,EAAAA,IAAAA,MAAgBlF,QAAQ+F,IAAI,CAClCrK,EAAMC,OAAMkJ,EAAA,CAAA,GACPI,GAAW3C,aAAW,EACzBxG,+BAA+BG,GAAQH,8BAAAA,CAAAA,CAAAA,GAEzC+C,EAAOlD,OAAOsJ,GAAWzC,YAAAA,CAAAA,CAAAA,GAG3B6C,SAAAA,KAAAF,OAAAE,GAAwBlH,UAAAA,EAAYC,QAAQC,CAAAA,OAASA,GAAMC,KAAAA,CAAAA,GAC3D6G,KAAyB,MAAA,IAEdR,GAAaC,IAAaK,IAAYD,IAAOE,EAAAA;IAC1D,SAASlH,IAAAA;AAAOgI,UAAAA,GAAAC,GAAAC,GAAAC;AAMd,YALAvB,GAAYH,eAAe,EAAEK,QAAQ,eAAA,CAAA,GACrCkB,SAAAA,IAAAb,OAAAa,EAAwB7H,UAAAA,EAAYC,QAAQC,CAAAA,OAASA,GAAMC,KAAAA,CAAAA,GACjD,SAAV2H,IAAAhB,OAAAgB,EAAY1H,MAAAA,GAAAA,OACN2H,SAANA,IAAMlB,MAAAA,SAAAkB,EAAO3H,MAAAA,IAAAA,OACP4H,SAANA,IAAMjB,MAAAA,SAAAiB,EAAQ5H,MAAAA,IACRP;IACR;EACF;EAYAQ,YACmBvC,IACAgJ,IACDD,IACAE,IAAAA;AAAckB,QAAAA,KAAAA;AAAAA,SAHbnK,UAAAA,QAAAwC,KACAwG,aAAAA,QAAAxG,KACDuG,QAAAA,QAAAvG,KACAyG,SAAAA,QAAAzG,KAdV4H,yBAAiC,GAAC5H,KAClC6H,OAAa,aACbxB,KAAAA,SAAiB,cACjByB,KAAAA,qBAAAA,QACAC,KAAAA,sBAAAA,QACAC,KAAAA,SAAiB,GACjBC,KAAAA,iBAAyB,GAACjI,KAC1BkI,sBAA8B,GAAClI,KAC/BsG,kBAAAA,OAAgCtG,KAkBjCmI,aAAa,MAAMnI,KAAKoI,sBAAsB,EAAE7D,QAAQ,OAAA,CAAA,GAASvE,KAEhEoI,wBAAwBC,eAAOtD,IAAAA;AACjB,sBAAhB4C,GAAKtB,UAA0C,iBAAhBsB,GAAKtB,WACxCsB,GAAKW,aAAa,eAAA,GAElBX,GAAKnB,WAAW1G,MAAAA,GAAAA,MACV6H,GAAKpB,MAAMzG,MAAAA,GAAAA,MACX6H,GAAKlB,OAAO3G,MAAAA,GAElB6H,GAAKW,aAAa,cAAA,GAClBX,GAAKnK,QAAQsH,aAAaC,EAAAA;IAC5B,GAAC/E,KAEOuI,aAAcV,CAAAA,OAAAA;AAChBA,MAAAA,OAAS7H,KAAK6H,SAChB7H,KAAK6H,OAAOA,IACZ7H,KAAKxC,QAAQuI,aAAa,EAAE8B,MAAAA,GAAAA,CAAAA;IAC9B,GACD7H,KAEOsI,eAAgBjC,CAAAA,OAAAA;AAClBA,MAAAA,OAAWrG,KAAKqG,WAClBrG,KAAKqG,SAASA,IACdrG,KAAKxC,QAAQwI,eAAe,EAAEK,QAAAA,GAAAA,CAAAA;IAChC,GAGMmC,KAAAA,wBAAwB,MAAA;AAC9B,YAAMlC,KAAkBtG,KAAKiI,mBAAmBjI,KAAKkI;AACjDlI,WAAKsG,oBAAoBA,OAC3BtG,KAAKsG,kBAAkBA,IACvBtG,KAAKxC,QAAQyI,wBAAwB,EAAEK,iBAAAA,GAAAA,CAAAA;IACzC,GAGM1B,KAAAA,YAAYyD,eAAO5D,IAAAA;AACzB,cAAQA,GAAYlI,MAAAA;QAClB,KAAK;AAKH,iBAJIkI,GAAYgE,uBACdd,GAAKC,yBAAyBnD,GAAYgE,mBAAmBC,WAAAA,KAE/Df,GAAKgB,aAAAA;QAIP,KAAK;AAKH,iBAAA,KAJAhB,GAAKnK,QAAQoH,UAAU,EACrB7F,QAAQ,MACRqE,SAASqB,GAAYmE,qBAAqBC,eAAAA,CAAAA;QAK9C,KAAK;AAKH,iBAAA,KAJAlB,GAAKnK,QAAQoH,UAAU,EACrB7F,QAAQ,QACRqE,SAASqB,GAAYqE,yBAAyBC,gBAAAA,CAAAA;QAKlD,KAAK;AAOH,iBAAA,KANApB,GAAKnK,QAAQoI,QAAQ,EACnBrJ,MAAM,4BACNyM,UACEvE,GAAYwE,wCACTC,yBAAAA,CAAAA;QAKT,KAAK;AAEH,cADA1F,QAAQ2F,KAAK,qCAAqC1E,GAAY2E,gBAAAA,GAE5DzB,GAAKnK,QAAQiI,YAAY4D,eACvB5E,GAAY2E,iBAAiBE,SAAAA,EAG/B,KAAA;AAAIC,gBAAAA;AACF,kBAAMC,KAGsC,SAHhCD,KAAAA,MACH5B,GAAKnK,QAAQiI,YAClBhB,GAAY2E,iBAAiBE,SAAAA,EAC7B7E,GAAY2E,iBAAiBK,UAAAA,KAAWF,KAC1C,qCAGIG,KAAoC,YAAA,OAAXF,KAAsBxG,KAAKC,UAAUuG,EAAAA,IAAU9N,OAAO8N,EAAAA;AAErF7B,YAAAA,GAAKnB,WAAW7B,YAAY,EAC1BpI,MAAM,sBACNoN,cAAclF,GAAY2E,iBAAiBO,cAC3CH,QAAQE,IACRE,UAAAA,MAAU,CAAA;UAEd,SAASC,IAAAA;AACPlC,YAAAA,GAAK9B,QACH,yDACGgE,QAAAA,KAAAA,SAAAA,GAAazG,UAChB,EACE0G,gBAAgBrF,GAAY2E,iBAAiBE,UAAAA,CAAAA,GAGjD3B,GAAKnB,WAAW7B,YAAY,EAC1BpI,MAAM,sBACNoN,cAAclF,GAAY2E,iBAAiBO,cAC3CH,QAAQ,oCAA+C,QAAXK,KAAAA,SAAAA,GAAazG,UACzDwG,UAAAA,KAAU,CAAA;UAEd;eACK;AACL,gBAAIjC,GAAKnK,QAAQuM,0BAGf,QAAA,KAFApC,GAAKnK,QAAQuM,0BAA0BtF,GAAY2E,gBAAAA;AAKrDzB,YAAAA,GAAK9B,QACH,yBAAyBpB,GAAY2E,iBAAiBE,SAAAA,6BACtD,EACEQ,gBAAgBrF,GAAY2E,iBAAiBE,UAAAA,CAAAA,GAGjD3B,GAAKnB,WAAW7B,YAAY,EAC1BpI,MAAM,sBACNoN,cAAclF,GAAY2E,iBAAiBO,cAC3CH,QAAQ,yBAAyB/E,GAAY2E,iBAAiBE,SAAAA,6BAC9DM,UAAAA,KAAU,CAAA;UAEd;AAEA;QAGF,KAAK;AASH,iBAAA,MAPIjC,GAAKC,0BAA0BnD,GAAYuF,YAAYtB,aACzDf,GAAKnK,QAAQsI,QAAQrB,GAAYuF,YAAYC,aAAAA,GAC7CtC,GAAKuC,oBAAoBzF,GAAYuF,YAAYC,aAAAA,GACjDtC,GAAKM,iBAAiBxD,GAAYuF,YAAYtB,UAC9Cf,GAAKa,sBAAAA,GACLb,GAAKY,WAAW,UAAA;QAKpB,KAAK;AAOH,iBAAA,KANAZ,GAAKnB,WAAW7B,YAAY,EAC1BpI,MAAM,QACNmM,UAAUjE,GAAY0F,WAAWzB,SAAAA,CAAAA;QAQrC;AAEE,iBAAA,KADAf,GAAKnK,QAAQoI,QAAQnB,EAAAA;MAAAA;IAI3B,GAACzE,KAEOoK,wBAAyB3J,CAAAA,OAAAA;AAOX,sBAAhBT,KAAKqG,UACPrG,KAAKwG,WAAW7B,YAAY,EAC1B0F,kBAAkBjP,EAREqF,GAAM6C,KAAK,CAAA,EAQuBhI,MAAAA,EAAAA,CAAAA;IAG1D,GAED0E,KAEOsK,yBAAyB,CAAA,EAAGhH,MAAAA,GAAAA,MAAAA;AAChB,oBAAdA,GAAK/G,QACPyD,KAAKuI,WAAWjF,GAAKiH,WAAW,cAAc,UAAA;IAChD,GAGML,KAAAA,sBAAuBM,CAAAA,OAAAA;AAC7BxK,WAAKyG,OAAOpG,KAAKA,KAAKoK,QAAQzK,KAAKgI,QACnChI,KAAKyG,OAAOxH,QAAQE,KAAKC,YAAY,EAAE7C,MAAM,mBAAA,CAAA,GAC7CyD,KAAKyG,OAAOxH,QAAQE,KAAKC,YAAY,EACnC7C,MAAM,UACNjB,QAAQM,EAAoB4O,EAAAA,EAAAA,CAAAA;IAC7B,GAGK7B,KAAAA,eAAe,MAAA;AAErB3I,WAAKuI,WAAW,WAAA,GAChBvI,KAAKyG,OAAOxH,QAAQE,KAAKC,YAAY,EAAE7C,MAAM,YAAA,CAAA,GAC7CyD,KAAKyG,OAAOpG,KAAKA,KAAKqK,6BACpB,MACA1K,KAAKyG,OAAOnJ,QAAQqN,cAAc,CAAA,GAIpCxH,WAAW,MAAA;AACTnD,aAAKyG,OAAOpG,KAAKA,KAAKoK,QAAQzK,KAAKgI,QACnChI,KAAKyG,OAAOxH,QAAQE,KAAKC,YAAY,EAAE7C,MAAM,mBAAA,CAAA;MAAoB,GAChE,GAAA;IAAI,GAGDsJ,KAAAA,UAAU,CAACzC,IAAiB9F,OAAAA;AAClCkG,cAAQjE,MAAM6D,IAAS9F,EAAAA,GACvB0C,KAAKxC,QAAQqI,QAAQzC,IAAS9F,EAAAA;IAAO,GAG/BsN,KAAAA,kBAAmBC,CAAAA,OAAAA;AACzB,UAA6B,MAAzBA,GAAc5O,OAChB,QACF;AAIA,UAAI+L,KAAS;AACb,eAAS7L,KAAI,GAAGA,KAAI0O,GAAc5O,QAAQE,KACxC6L,CAAAA,MAAU6C,GAAc1O,EAAAA,IAAK;AAI/B,aAFA6L,MAAU6C,GAAc5O,QAEjB+L,KAAS,IAAI,IAAIA,KAAS,IAAI,IAAIA;IAAAA,GAC1ChI,KAEM8K,QAAQ,MAAM9K,KAAKwG,WAAWvC,gBAAcjE,KAE5C+K,SAAS,MAAsB,gBAAhB/K,KAAKqG,QAEpB2E,KAAAA,YAAY,CAAA,EAAGhD,QAAAA,GAAAA,MAAAA;AACpBhI,WAAKgI,SAASA;IAAAA,GACfhI,KAEMiL,cAAe/K,CAAAA,OAAAA;AACpBF,WAAKuG,MAAMtG,SAASC,EAAAA;IAAO,GAC5BF,KAEMkL,4BAA4B,OACVC,QAAvBnL,KAAK8H,uBAAL9H,KAAK8H,qBAAuB,IAAIvM,WAC9ByE,KAAKuG,MAAM9H,SAAS2M,iBAAAA,IAEtBpL,KAAKuG,MAAM9H,SAAS4M,qBAAqBrL,KAAK8H,kBAAAA,GACvC9H,KAAK8H,qBACb9H,KAEMsL,6BAA6B,OACVC,QAAxBvL,KAAK+H,wBAAL/H,KAAK+H,sBAAwB,IAAIxM,WAC/ByE,KAAKyG,OAAOhI,SAAS2M,iBAAAA,IAEvBpL,KAAKyG,OAAOhI,SAAS4M,qBAAqBrL,KAAK+H,mBAAAA,GACxC/H,KAAK+H,sBACb/H,KAEMwL,iBAAiB,MACfxL,KAAK4K,gBAAgB5K,KAAKkL,0BAAAA,CAAAA,GAClClL,KAEMyL,kBAAkB,MAChBzL,KAAK4K,gBAAgB5K,KAAKsL,2BAAAA,CAAAA,GAClCtL,KAEM0L,eAAgBC,CAAAA,OAAAA;AAChB3L,WAAKsG,mBASVtG,KAAKwG,WAAW7B,YAAY,EAC1BpI,MAAM,YACNqP,OAAOD,KAAO,SAAS,WACvBjD,UAAU1I,KAAKiI,eAAAA,CAAAA,GAEjBjI,KAAKkI,sBAAsBlI,KAAKiI,gBAChCjI,KAAKwI,sBAAAA,KAdHhF,QAAQC,KACuB,MAA7BzD,KAAKkI,sBACD,gEACA,gFAAA;IAYV,GA5SmBlI,KAAOxC,UAAPA,IACAwC,KAAUwG,aAAVA,IACDxG,KAAKuG,QAALA,IACAvG,KAAMyG,SAANA,IAEhBzG,KAAKxC,QAAQmI,UAAU,EAAE1B,gBAAgBuC,GAAWvC,eAAAA,CAAAA,GAEpDjE,KAAKwG,WAAW1B,aAAa9E,KAAKoI,qBAAAA,GAClCpI,KAAKwG,WAAW5B,UAAU5E,KAAK4E,SAAAA,GAE/B5E,KAAKuG,MAAMtH,QAAQE,KAAK0M,YAAY7L,KAAKoK,uBACzCpK,KAAKyG,OAAOxH,QAAQE,KAAK0M,YAAY7L,KAAKsK,wBAC1CtK,KAAKsI,aAAa,WAAA;EACpB;AAAA;AAkSc,SAAAwD,EACd7H,IACA0H,IACA7K,KAlYuB,6BAAA;AAoYvB,SAAOiL,MAAM,GAAGjL,EAAAA,4BAAkCmD,EAAAA,aAA2B,EAC3E+H,QAAQ,QACRC,MAAMjJ,KAAKC,UAAU,EACnBiJ,UAAUP,KAAO,SAAS,UAAA,CAAA,GAE5BQ,SAAS,EACP,gBAAgB,mBAAA,EAAA,CAAA;AAGtB;;;;;;;;;;;;AC5cA,IAAAC,KAAA,CAAA,YAAA,QAAA;AAwCgB,SAAAC,GAAyDC,KAAW,CAAO,GAAA;AACzF,QAAA,EAAMC,UAACA,IAAQC,QAAEA,GAAAA,IAA6BF,IAAlBG,KAAAA,SAAAA,IAAAA,IAAAA;AAAAA,QAAAA,QAAAA,GAAAA,QAAAA,CAAAA;AAAAA,QAAAA,KAAAA,CAAAA;AAAAA,aAAAA,MAAAA,GAAAA,KAAAA,CAAAA,EAAAA,eAAAA,KAAAA,IAAAA,EAAAA,GAAAA;AAAAA,UAAAA,GAAAA,SAAAA,EAAAA,EAAAA;AAAAA,MAAAA,GAAAA,EAAAA,IAAAA,GAAAA,EAAAA;IAAAA;AAAAA,WAAAA;EAAAA,EAAkBH,IAAKF,EAAAA,GAC7CM,SAAkBC,aAAAA,QAA4B,IAAA,GAC9CC,SAAUD,aAAAA,QAAqC,IAAA,GAAA,CAC9CE,GAAQC,EAAAA,QAAaC,aAAAA,UAAiB,cAAA,GAAA,CACtCC,IAAiBC,EAAAA,QAAsBF,aAAAA,UAAAA,KAAS,GAAA,CAChDG,IAAMC,CAAAA,QAAWJ,aAAAA,UAAe,WAAA;AAoBvC,aAlBAK,aAAAA,WAAU,MAAA;AACoBC,QAAAA;AAAAA,eAAxBd,OACac,QAAfX,MAAwB,SAATW,KAAfX,GAAiBY,YAAjBD,GAA0BE,YAAYhB,EAAAA;EACxC,GACC,CAACA,EAAAA,CAAAA,OAEJa,aAAAA,WAAU,MAAA;AACkB,QAAAI;AAAAA,eAAtBhB,OACagB,QAAfd,MAAAc,SAAeA,KAAfd,GAAiBY,YAAjBE,GAA0BC,UAAU,EAAEjB,QAAAA,GAAAA,CAAAA;EACxC,GACC,CAACA,EAAAA,CAAAA,OAEJY,aAAAA,WAAU,MACD,MAAA;AAAKM,QAAAA;AACa,aAAvBA,KAAAhB,GAAgBY,YAAhBI,GAAyBC,WAAAA;EAAAA,GAE1B,CAAA,CAAA,GAEI,EACLC,cAAeC,OAAAA,OAAAA;AAAgCC,QAAAA;AAC7C,QAAIA,SAAJA,KAAIpB,GAAgBY,YAAhBQ,GAAyBC,OAAAA,EAC3B,QAAOrB,GAAgBY,QAAQU,MAAAA;AAGjC,QAAIpB,GAAQU,QAEV,SAAA,MAD2BV,GAAQU,SACfU,MAAAA;AAGtB,QAAA;AAwBE,aAvBApB,GAAQU,UAAUW,EAAaL,aAAYM,GAAA,CAAA,GACrCzB,QAAAA,KAAAA,KAAkB,CAAA,GAClB0B,QAAAA,KAAAA,KAAW,CAAA,GACfC,EAAAA,cAAcA,CAAAA,EAAGlB,MAAAA,GAAAA,MAAAA;AACfC,UAAQD,EAAAA;MAAI,GAEdmB,gBAAgBA,CAAAA,EAAGxB,QAAAA,GAAAA,MAAAA;AACjBC,QAAAA,GAAUD,EAAAA;MACZ,GACAyB,yBAAyBA,CAAAA,EAAGtB,iBAAAA,GAAAA,MAAAA;AAC1BC,QAAAA,GAAmBD,EAAAA;MAAe,EAAA,CAAA,CAAA,GAItCN,GAAgBY,UAAAA,MAAgBV,GAAQU,SAAAA,WAEpCf,MACFG,GAAgBY,QAAQC,YAAYhB,EAAAA,GAAAA,WAElCC,MACFE,GAAgBY,QAAQG,UAAU,EAAEjB,QAAAA,GAAAA,CAAAA,GAG/BE,GAAgBY,QAAQU,MAAAA;IACjC,UAAC;AACCpB,MAAAA,GAAQU,UAAU;IACpB;EAAA,GAIFK,YAAYE,YAAAA;AACV,UAAMU,KAAe7B,GAAgBY;AACrCZ,IAAAA,GAAgBY,UAAU,MAAA,OAAA,QACpBiB,KAAAA,SAAAA,GAAcZ,WAAAA;EACtB,GACAF,WAAWA,CAAAA,EAAGjB,QAAAA,GAAAA,MAAAA;AAAgC,QAAAgC;AACrB,aAAvBA,KAAA9B,GAAgBY,YAAhBkB,GAAyBf,UAAU,EAAEjB,QAAAA,GAAAA,CAAAA;EACvC,GACAiC,2BAA2BA,MAAAA;AAAK,QAAAC;AAC9B,WAA8B,SAA9BA,KAAOhC,GAAgBY,WAAAA,SAAhBoB,GAAyBD,0BAAAA;EAAyB,GAE3DE,4BAA4BA,MAAAA;AAAKC,QAAAA;AAC/B,WAAA,SAAAA,KAAOlC,GAAgBY,WAAAA,SAAhBsB,GAAyBD,2BAAAA;EAClC,GACAE,gBAAgBA,MAAAA;AAAKC,QAAAA,IAAAC;AACnB,WAAgDD,SAAhDA,KAAOC,SAAPA,KAAOrC,GAAgBY,WAAAA,SAAhByB,GAAyBF,eAAAA,KAAgBC,KAAI;EAAA,GAEtDE,iBAAiBA,MAAAA;AAAKC,QAAAA,IAAAC;AACpB,WAAiDD,SAAjDA,KAA8B,SAA9BC,KAAOxC,GAAgBY,WAAAA,SAAhB4B,GAAyBF,gBAAAA,KAAiBC,KAAI;EAAA,GAEvDE,cAAeC,CAAAA,OAAAA;AAAiB,QAAAC;AAC9BA,aAAAA,KAAA3C,GAAgBY,YAAhB+B,GAAyBF,aAAaC,EAAAA;EAAI,GAE5CpB,OAAOA,MAAAA;AAAK,QAAAsB;AACV,WAAOA,SAAPA,KAAO5C,GAAgBY,WAAAA,SAAhBgC,GAAyBtB,MAAAA;EAClC,GACAnB,QAAAA,GACAG,iBAAAA,IACAT,UAAAA,IACAgD,YAAqB,eAATrC,GAAAA;AAEhB;",
  "names": ["arrayBufferToBase64", "b", "buffer", "Uint8Array", "window", "btoa", "String", "fromCharCode", "base64ToArrayBuffer", "base64", "binaryString", "atob", "len", "length", "bytes", "i", "charCodeAt", "blob", "Blob", "type", "rawAudioProcessor", "URL", "createObjectURL", "isIosDevice", "includes", "navigator", "platform", "userAgent", "document", "Input", "create", "sampleRate", "format", "preferHeadphonesForIosDevices", "context", "inputStream", "options", "ideal", "echoCancellation", "noiseSuppression", "idealDevice", "mediaDevices", "enumerateDevices", "find", "d", "kind", "keyword", "label", "toLowerCase", "deviceId", "supportsSampleRateConstraint", "getSupportedConstraints", "AudioContext", "analyser", "createAnalyser", "audioWorklet", "addModule", "getUserMedia", "audio", "source", "createMediaStreamSource", "worklet", "AudioWorkletNode", "port", "postMessage", "connect", "resume", "error", "_inputStream", "_context", "getTracks", "forEach", "track", "stop", "close", "constructor", "this", "setMuted", "isMuted", "audioConcatProcessor", "Output", "gain", "createGain", "destination", "isValidSocketEvent", "event", "Connection", "config", "socket", "_config$origin", "origin", "url", "signedUrl", "agentId", "protocols", "authorization", "push", "WebSocket", "conversationConfig", "Promise", "resolve", "reject", "addEventListener", "_socket", "overridesEvent", "_config$overrides$age", "_config$overrides$age2", "_config$overrides$age3", "_config$overrides$tts", "overrides", "conversation_config_override", "agent", "prompt", "first_message", "firstMessage", "language", "tts", "voice_id", "voiceId", "customLlmExtraBody", "custom_llm_extra_body", "dynamicVariables", "dynamic_variables", "send", "JSON", "stringify", "once", "setTimeout", "message", "parse", "data", "conversation_initiation_metadata_event", "console", "warn", "conversation_id", "agent_output_audio_format", "user_input_audio_format", "inputFormat", "parseFormat", "outputFormat", "_socket2", "conversationId", "queue", "disconnectionDetails", "onDisconnectCallback", "onMessageCallback", "disconnect", "reason", "code", "parsedEvent", "_", "sendMessage", "onMessage", "callback", "onDisconnect", "details", "_this$onDisconnectCal", "call", "formatPart", "sampleRatePart", "split", "Error", "parseInt", "isNaN", "defaultClientTools", "clientTools", "defaultCallbacks", "onConnect", "onDebug", "onError", "onAudio", "onModeChange", "onStatusChange", "onCanSendFeedbackChange", "Conversation", "fullOptions", "_extends", "status", "canSendFeedback", "input", "connection", "output", "preliminaryInputStream", "_options$connectionDe", "_preliminaryInputStre", "delayConfig", "connectionDelay", "default", "android", "delay", "_delayConfig$android", "test", "_delayConfig$ios", "ios", "all", "_preliminaryInputStre2", "_connection", "_input", "_output", "_this", "lastInterruptTimestamp", "mode", "inputFrequencyData", "outputFrequencyData", "volume", "currentEventId", "lastFeedbackEventId", "endSession", "endSessionWithDetails", "async", "updateStatus", "updateMode", "updateCanSendFeedback", "interruption_event", "event_id", "fadeOutAudio", "agent_response_event", "agent_response", "user_transcription_event", "user_transcript", "response", "tentative_agent_response_internal_event", "tentative_agent_response", "info", "client_tool_call", "hasOwnProperty", "tool_name", "_await$_this$options$", "result", "parameters", "formattedResult", "tool_call_id", "is_error", "e", "clientToolName", "onUnhandledClientToolCall", "audio_event", "audio_base_64", "addAudioBase64Chunk", "ping_event", "onInputWorkletMessage", "user_audio_chunk", "onOutputWorkletMessage", "finished", "chunk", "value", "exponentialRampToValueAtTime", "currentTime", "calculateVolume", "frequencyData", "getId", "isOpen", "setVolume", "setMicMuted", "getInputByteFrequencyData", "_this$inputFrequencyD", "frequencyBinCount", "getByteFrequencyData", "getOutputByteFrequencyData", "_this$outputFrequency", "getInputVolume", "getOutputVolume", "sendFeedback", "like", "score", "onmessage", "postOverallFeedback", "fetch", "method", "body", "feedback", "headers", "_excluded", "useConversation", "props", "micMuted", "volume", "defaultOptions", "conversationRef", "useRef", "lockRef", "status", "setStatus", "useState", "canSendFeedback", "setCanSendFeedback", "mode", "setMode", "useEffect", "_conversationRef$curr", "current", "setMicMuted", "_conversationRef$curr2", "setVolume", "_conversationRef$curr3", "endSession", "startSession", "async", "_conversationRef$curr4", "isOpen", "getId", "Conversation", "_extends", "options", "onModeChange", "onStatusChange", "onCanSendFeedbackChange", "conversation", "_conversationRef$curr5", "getInputByteFrequencyData", "_conversationRef$curr6", "getOutputByteFrequencyData", "_conversationRef$curr7", "getInputVolume", "_conversationRef$curr8", "_conversationRef$curr9", "getOutputVolume", "_conversationRef$curr10", "_conversationRef$curr11", "sendFeedback", "like", "_conversationRef$curr12", "_conversationRef$curr13", "isSpeaking"]
}
